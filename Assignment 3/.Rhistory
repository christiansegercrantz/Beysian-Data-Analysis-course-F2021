E = 0.2
prior_alpha = c(1,2,5,10,100)#seq(from = 1, to=100, length.out = 4 )
prior_beta = c(1,-(prior_alpha[-1]/E)*(E-1))
res = prior_to_post(prior_alpha,prior_beta,algae)
alpha = res$alpha
beta = res$beta
x= seq(from=0,to=1, by=1/270)
betapdf1 = dbeta(x,alpha[1],beta[1])
betapdf2 = dbeta(x,alpha[2],beta[2])
betapdf3 = dbeta(x,alpha[3],beta[3])
betapdf4 = dbeta(x,alpha[4],beta[4])
betapdf5 = dbeta(x,alpha[5],beta[5])
par(mfrow=c(1,1))
plot(x, betapdf1,
type='l', col='black',
ylim=c(0,35),
xlim=c(0,0.4),
ylab="PDF")
leg1 = paste0("Uniform: alpha: ",prior_alpha[1], ", beta: ", prior_beta[1])
lines(x, betapdf2,
type='l', col ='blue')
leg2 = paste0("Original: alpha: ",prior_alpha[2], ", beta: ", prior_beta[2])
lines(x, betapdf3,
type='l', col ='purple')
leg3 = paste0("Beta: alpha: ",prior_alpha[3], ", beta: ", prior_beta[3])
lines(x, betapdf4,
type='l', col ='red')
leg4 = paste0("Beta: alpha: ",prior_alpha[4], ", beta: ", prior_beta[4])
lines(x, betapdf5,
type='l', col ='orange')
leg5 = paste0("Beta: alpha: ",prior_alpha[5], ", beta: ", prior_beta[5])
legend(0.25,30, legend=c(leg1, leg2, leg3, leg4, leg5),
col=c("black", "blue", "purple", "red", "orange"), lty=1, cex=0.8)
post_mean = alpha/(alpha+beta)
vec_alpha_beta = c("Prior alpha + beta", prior_alpha + prior_beta)
vec_prior_mean = c("Prior mean", round(prior_alpha /(prior_alpha + prior_beta), digits=3))
vec_post_mean = c("Post mean", round(alpha/(alpha+beta), digits=3))
vec_interval_upper = numeric(5)
vec_interval_lower = numeric(5)
for(i in 1:5){
int = beta_interval(prior_alpha = prior_alpha[i], prior_beta = prior_beta[i], data = algae, prob = 0.9)
vec_interval_lower[i] = round(int[1],digits=3)
vec_interval_upper[i] = round(int[2],digits=3)
}
info_frame = data.frame(vec_alpha_beta[-1],vec_prior_mean[-1],vec_post_mean[-1],vec_interval_lower,vec_interval_upper)
names(info_frame) = c(vec_alpha_beta[1],vec_prior_mean[1],vec_post_mean[1], "90% interval lower bound", "upper bound")
kable(info_frame)
E = 0.2
prior_alpha = c(1,2,5,10,100)
prior_beta = c(1,-(prior_alpha[-1]/E)*(E-1))
res = prior_to_post(prior_alpha,prior_beta,algae)
alpha = res$alpha
beta = res$beta
x= seq(from=0,to=1, by=1/270)
betapdf1 = dbeta(x,alpha[1],beta[1])
betapdf2 = dbeta(x,alpha[2],beta[2])
betapdf3 = dbeta(x,alpha[3],beta[3])
betapdf4 = dbeta(x,alpha[4],beta[4])
betapdf5 = dbeta(x,alpha[5],beta[5])
par(mfrow=c(1,1))
plot(x, betapdf1,
type='l', col='black',
ylim=c(0,35),
xlim=c(0,0.4),
ylab="PDF")
leg1 = paste0("Uniform: alpha: ",prior_alpha[1], ", beta: ", prior_beta[1])
lines(x, betapdf2,
type='l', col ='blue')
leg2 = paste0("Original: alpha: ",prior_alpha[2], ", beta: ", prior_beta[2])
lines(x, betapdf3,
type='l', col ='purple')
leg3 = paste0("Beta: alpha: ",prior_alpha[3], ", beta: ", prior_beta[3])
lines(x, betapdf4,
type='l', col ='red')
leg4 = paste0("Beta: alpha: ",prior_alpha[4], ", beta: ", prior_beta[4])
lines(x, betapdf5,
type='l', col ='orange')
leg5 = paste0("Beta: alpha: ",prior_alpha[5], ", beta: ", prior_beta[5])
legend(0.235,30, legend=c(leg1, leg2, leg3, leg4, leg5),
col=c("black", "blue", "purple", "red", "orange"), lty=1, cex=0.8)
beta_low = function(prior_alpha, prior_beta, data, pi_0){
res = prior_to_post(prior_alpha,prior_beta,data)
alpha = res$alpha
beta = res$beta
res = pbeta(pi_0, alpha, beta)
return(res)
}
beta_low(prior_alpha = 2, prior_beta = 10, data = algae, pi_0 = 0.2)
library(aaltobda)
library(knitr)
rm(list = ls())
algae_test = c(0, 1, 1, 0, 0, 0)
data("algae")
prior_to_post = function(prior_alpha, prior_beta, data) {
n = length(data)
y = sum(data)
post_alpha = prior_alpha+y
post_beta = prior_beta+n-y
res = list(alpha=post_alpha, beta = post_beta)
return(res)
}
res = prior_to_post(2,10,algae)
alpha = res$alpha
beta = res$beta
paste0("alpha: ", alpha)
paste0("beta: ", beta)
beta_point_est = function( prior_alpha, prior_beta, data){
res = prior_to_post(prior_alpha,prior_beta,data)
alpha = res$alpha
beta = res$beta
return(alpha/(alpha+beta))
}
beta_point_est(prior_alpha = 2, prior_beta = 10, data = algae)
beta_interval = function(prior_alpha, prior_beta, data, prob){
lower = (1-prob)/2
upper = prob+lower
interval = c(lower,upper)
res = prior_to_post(prior_alpha,prior_beta,data)
alpha = res$alpha
beta = res$beta
res = qbeta(interval, alpha, beta)
return(res)
}
beta_interval(prior_alpha = 2, prior_beta = 10, data = algae, prob = 0.9)
beta_low = function(prior_alpha, prior_beta, data, pi_0){
res = prior_to_post(prior_alpha,prior_beta,data)
alpha = res$alpha
beta = res$beta
res = pbeta(pi_0, alpha, beta)
return(res)
}
beta_low(prior_alpha = 2, prior_beta = 10, data = algae, pi_0 = 0.2)
E = 0.2
prior_alpha = c(1,2,5,10,100)
prior_beta = c(1,-(prior_alpha[-1]/E)*(E-1))
res = prior_to_post(prior_alpha,prior_beta,algae)
alpha = res$alpha
beta = res$beta
x= seq(from=0,to=1, by=1/270)
betapdf1 = dbeta(x,alpha[1],beta[1])
betapdf2 = dbeta(x,alpha[2],beta[2])
betapdf3 = dbeta(x,alpha[3],beta[3])
betapdf4 = dbeta(x,alpha[4],beta[4])
betapdf5 = dbeta(x,alpha[5],beta[5])
par(mfrow=c(1,1))
plot(x, betapdf1,
type='l', col='black',
ylim=c(0,35),
xlim=c(0,0.4),
ylab="PDF")
leg1 = paste0("Uniform: alpha: ",prior_alpha[1], ", beta: ", prior_beta[1])
lines(x, betapdf2,
type='l', col ='blue')
leg2 = paste0("Beta: alpha: ",prior_alpha[2], ", beta: ", prior_beta[2])
lines(x, betapdf3,
type='l', col ='purple')
leg3 = paste0("Beta: alpha: ",prior_alpha[3], ", beta: ", prior_beta[3])
lines(x, betapdf4,
type='l', col ='red')
leg4 = paste0("Beta: alpha: ",prior_alpha[4], ", beta: ", prior_beta[4])
lines(x, betapdf5,
type='l', col ='orange')
leg5 = paste0("Beta: alpha: ",prior_alpha[5], ", beta: ", prior_beta[5])
legend(0.235,30, legend=c(leg1, leg2, leg3, leg4, leg5),
col=c("black", "blue", "purple", "red", "orange"), lty=1, cex=0.8)
post_mean = alpha/(alpha+beta)
vec_alpha_beta = c("Prior alpha + beta", prior_alpha + prior_beta)
vec_prior_mean = c("Prior mean", round(prior_alpha /(prior_alpha + prior_beta), digits=3))
vec_post_mean = c("Post mean", round(alpha/(alpha+beta), digits=3))
vec_interval_upper = numeric(5)
vec_interval_lower = numeric(5)
for(i in 1:5){
int = beta_interval(prior_alpha = prior_alpha[i], prior_beta = prior_beta[i], data = algae, prob = 0.9)
vec_interval_lower[i] = round(int[1],digits=3)
vec_interval_upper[i] = round(int[2],digits=3)
}
info_frame = data.frame(vec_alpha_beta[-1],vec_prior_mean[-1],vec_post_mean[-1],vec_interval_lower,vec_interval_upper)
names(info_frame) = c(vec_alpha_beta[1],vec_prior_mean[1],vec_post_mean[1], "90% interval lower bound", "upper bound")
kable(info_frame)
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 3")
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 3")
library(aaltobda)
data("windshieldy1")
windshieldy_test <- c(13.357, 14.928, 14.896, 14.820)
head(windshieldy1)
mu_point_est = function(data){
return(mean(data))
}
mu_interval = function(data, prob){
mu = mu_point_est(data)
n = length(data)
freedom = n-1
scale = sqrt(var(data)/n)
low = (1-prob)/2
high= 1-low
int = c(low,high)
qt_scl <- qt(int,freedom)
res = c(mu + qt_scl[1]*scale, mu + qt_scl[2]*scale)
return(res)
}
mu_point_est(windshieldy_test)
mu_interval(data = windshieldy_test, prob = 0.95)
mu_point_est(windshieldy1)
mu_interval(data = windshieldy1, prob = 0.95)
n = length(windshieldy1)
x = seq(from=-10,to=10, by=0.1)
freedom = n-1
density = dt(x, freedom)
plot(x,density,
xlab = 'x',
type='l')
#Add the ablines
mu_pred_point_est = function(data){
return(mean(data))
}
mu_pred_interval = function(data, prob){
mu = mu_point_est(data)
n = length(data)
var = 1/(n-1)*sum((data-mu)^2)
freedom = n-1
scale = sqrt((1+1/n)*var)
low = (1-prob)/2
high= 1-low
int = c(low,high)
qt_scl <- qt(int,freedom)
res = c(mu + qt_scl[1]*scale, mu + qt_scl[2]*scale)
return(res)
}
#Test data:
mu_pred_point_est(data = windshieldy_test)
mu_pred_interval(data = windshieldy_test, prob = 0.95)
mu_pred_point_est(data = windshieldy1)
mu_pred_interval(data = windshieldy1, prob = 0.95)
n = length(windshieldy1)
x = seq(from=-10,to=10, by=0.1)
freedom = n-1
density = dt(x, freedom)
plot(x,density,
xlab = 'x',
type='l')
#Add the ablines
rm(list = ls())
posterior_odds_ratio_point_est = function(p0, p1){
ratio = (p1/(1 - p1))/(p0/(1 - p0))
return(mean(ratio))
}
posterior_odds_ratio_interval = function(p0, p1, prob){
data = (p1/(1 - p1))/(p0/(1 - p0))
lower = (1-prob)/2
upper = prob+lower
interval = c(lower,upper)
res = quantile(data,interval)
return(res)
}
set.seed(4711)
p0 <- rbeta(100000, 5, 95)
p1 <- rbeta(100000, 10, 90)
posterior_odds_ratio_point_est(p0 = p0, p1 = p1)
posterior_odds_ratio_interval(p0 = p0, p1 = p1, prob = 0.9)
n0 = 674
y0 = 39
n1 = 680
y1 = 22
prior_alpha = 1
prior_beta = 1
post_alpha0 = prior_alpha + n0 - y0
post_beta0 = prior_beta + y0
post_alpha1 = prior_alpha + n1 - y1
post_beta1 = prior_beta + y1
p0 <- rbeta(100000, post_alpha0, post_beta0)
p1 <- rbeta(100000, post_alpha1, post_beta1)
point_est = posterior_odds_ratio_point_est(p0 = p0, p1 = p1)
interval = posterior_odds_ratio_interval(p0 = p0, p1 = p1, prob = 0.95)
paste0("Point estimate: ", point_est)
paste0("Interval: ", interval)
ratio = (p1/(1 - p1))/(p0/(1 - p0))
hist(ratio, breaks=50)
abline(v = interval[1], col='red')
abline(v = interval[2], col='red')
abline(v = point_est, col='blue')
prior_alpha = c(0.1,0.5,1,5,100)
prior_beta = prior_alpha
post_alpha0 = numeric(length(prior_alpha))
post_beta0 = numeric(length(prior_alpha))
post_alpha1 = numeric(length(prior_alpha))
post_beta1 = numeric(length(prior_alpha))
p0 = numeric(length(prior_alpha))
p1 = numeric(length(prior_alpha))
point_est = numeric(length(prior_alpha))
interval = numeric(length(prior_alpha)*2)
post_alpha0 = prior_alpha + n0 - y0
post_beta0 = prior_beta + y0
post_alpha1 = prior_alpha + n1 - y1
post_beta1 = prior_beta + y1
for(i in 1:length(prior_alpha)){
p0 <- rbeta(100000, post_alpha0[i], post_beta0[i])
p1 <- rbeta(100000, post_alpha1[i], post_beta1[i])
point_est = posterior_odds_ratio_point_est(p0 = p0, p1 = p1)
interval = posterior_odds_ratio_interval(p0 = p0, p1 = p1, prob = 0.95)
ratio = (p1/(1 - p1))/(p0/(1 - p0))
hist(ratio,
breaks=50,
main=paste0("Histogram using prior alpha = ", prior_alpha[i], " and beta = ", prior_beta[i]),
xlim=c(0,5))
abline(v = interval[1], col='red')
abline(v = interval[2], col='red')
abline(v = point_est, col='blue')
legend(3.5,8000, legend=c("Data", "95-Interval", "Mean"),col=c("grey", "red", "blue"), lty=1, cex=0.8)
}
#rm(list = ls())
data("windshieldy1")
data("windshieldy2")
mu_point_est = function(data){
return(mean(data))
}
n1 = length(windshieldy1)
df1 = n1 - 1
mu1 = mu_point_est(windshieldy1)
scale1 = sqrt(var(windshieldy1)/n1)
n2 = length(windshieldy2)
df2 = n2 - 1
mu2 = mu_point_est(windshieldy2)
scale2 = sqrt(var(windshieldy2)/n2)
n_samples <- 100000
samples1 <- rtnew(n_samples, df=df1, mean = mu1, scale = scale1)
samples2 <- rtnew(n_samples, df=df2, mean = mu2, scale = scale2)
mu_d <- mu1 - mu2
#mu_d = mean(samples1-samples2)
paste0("Difference in the means are: ", mu_d)
mu_d_interval = function(samples1, samples2, prob){
low = (1-prob)/2
high = prob+low
int = c(low,high)
sample = samples1-samples2
res = quantile(sample, int)
}
interval = mu_d_interval(samples1 = samples1, samples2 = samples2, 0.95)
paste0("Interval low: ", interval[1], " and high: ", interval[2])
hist(samples1-samples2,
breaks=50)
abline(v = interval[1], col='red')
abline(v = interval[2], col='red')
abline(v = mu_d, col='blue')
legend(0.2 ,8000, legend=c("Data", "95-Interval", "mu_d"),col=c("grey", "red", "blue"), lty=1, cex=0.8)
library(yaml)
remove.packages("yaml", lib="~/R/win-library/3.6")
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 3")
library(aaltobda)
data("windshieldy1")
windshieldy_test <- c(13.357, 14.928, 14.896, 14.820)
head(windshieldy1)
mu_point_est = function(data){
return(mean(data))
}
mu_interval = function(data, prob){
mu = mu_point_est(data)
n = length(data)
freedom = n-1
scale = sqrt(var(data)/n)
low = (1-prob)/2
high= 1-low
int = c(low,high)
qt_scl <- qt(int,freedom)
res = c(mu + qt_scl[1]*scale, mu + qt_scl[2]*scale)
return(res)
}
mu_point_est(windshieldy_test)
mu_interval(data = windshieldy_test, prob = 0.95)
mu_point_est(windshieldy1)
mu_interval(data = windshieldy1, prob = 0.95)
n = length(windshieldy1)
x = seq(from=-10,to=10, by=0.1)
freedom = n-1
density = dt(x, freedom)
plot(x,density,
xlab = 'x',
type='l')
#Add the ablines
mu_pred_point_est = function(data){
return(mean(data))
}
mu_pred_interval = function(data, prob){
mu = mu_point_est(data)
n = length(data)
var = 1/(n-1)*sum((data-mu)^2)
freedom = n-1
scale = sqrt((1+1/n)*var)
low = (1-prob)/2
high= 1-low
int = c(low,high)
qt_scl <- qt(int,freedom)
res = c(mu + qt_scl[1]*scale, mu + qt_scl[2]*scale)
return(res)
}
#Test data:
mu_pred_point_est(data = windshieldy_test)
mu_pred_interval(data = windshieldy_test, prob = 0.95)
mu_pred_point_est(data = windshieldy1)
mu_pred_interval(data = windshieldy1, prob = 0.95)
n = length(windshieldy1)
x = seq(from=-10,to=10, by=0.1)
freedom = n-1
density = dt(x, freedom)
plot(x,density,
xlab = 'x',
type='l')
#Add the ablines
rm(list = ls())
posterior_odds_ratio_point_est = function(p0, p1){
ratio = (p1/(1 - p1))/(p0/(1 - p0))
return(mean(ratio))
}
posterior_odds_ratio_interval = function(p0, p1, prob){
data = (p1/(1 - p1))/(p0/(1 - p0))
lower = (1-prob)/2
upper = prob+lower
interval = c(lower,upper)
res = quantile(data,interval)
return(res)
}
set.seed(4711)
p0 <- rbeta(100000, 5, 95)
p1 <- rbeta(100000, 10, 90)
posterior_odds_ratio_point_est(p0 = p0, p1 = p1)
posterior_odds_ratio_interval(p0 = p0, p1 = p1, prob = 0.9)
n0 = 674
y0 = 39
n1 = 680
y1 = 22
prior_alpha = 1
prior_beta = 1
post_alpha0 = prior_alpha + n0 - y0
post_beta0 = prior_beta + y0
post_alpha1 = prior_alpha + n1 - y1
post_beta1 = prior_beta + y1
p0 <- rbeta(100000, post_alpha0, post_beta0)
p1 <- rbeta(100000, post_alpha1, post_beta1)
point_est = posterior_odds_ratio_point_est(p0 = p0, p1 = p1)
interval = posterior_odds_ratio_interval(p0 = p0, p1 = p1, prob = 0.95)
paste0("Point estimate: ", point_est)
paste0("Interval: ", interval)
ratio = (p1/(1 - p1))/(p0/(1 - p0))
hist(ratio, breaks=50)
abline(v = interval[1], col='red')
abline(v = interval[2], col='red')
abline(v = point_est, col='blue')
prior_alpha = c(0.1,0.5,1,5,100)
prior_beta = prior_alpha
post_alpha0 = numeric(length(prior_alpha))
post_beta0 = numeric(length(prior_alpha))
post_alpha1 = numeric(length(prior_alpha))
post_beta1 = numeric(length(prior_alpha))
p0 = numeric(length(prior_alpha))
p1 = numeric(length(prior_alpha))
point_est = numeric(length(prior_alpha))
interval = numeric(length(prior_alpha)*2)
post_alpha0 = prior_alpha + n0 - y0
post_beta0 = prior_beta + y0
post_alpha1 = prior_alpha + n1 - y1
post_beta1 = prior_beta + y1
for(i in 1:length(prior_alpha)){
p0 <- rbeta(100000, post_alpha0[i], post_beta0[i])
p1 <- rbeta(100000, post_alpha1[i], post_beta1[i])
point_est = posterior_odds_ratio_point_est(p0 = p0, p1 = p1)
interval = posterior_odds_ratio_interval(p0 = p0, p1 = p1, prob = 0.95)
ratio = (p1/(1 - p1))/(p0/(1 - p0))
hist(ratio,
breaks=50,
main=paste0("Histogram using prior alpha = ", prior_alpha[i], " and beta = ", prior_beta[i]),
xlim=c(0,5))
abline(v = interval[1], col='red')
abline(v = interval[2], col='red')
abline(v = point_est, col='blue')
legend(3.5,8000, legend=c("Data", "95-Interval", "Mean"),col=c("grey", "red", "blue"), lty=1, cex=0.8)
}
#rm(list = ls())
data("windshieldy1")
data("windshieldy2")
mu_point_est = function(data){
return(mean(data))
}
n1 = length(windshieldy1)
df1 = n1 - 1
mu1 = mu_point_est(windshieldy1)
scale1 = sqrt(var(windshieldy1)/n1)
n2 = length(windshieldy2)
df2 = n2 - 1
mu2 = mu_point_est(windshieldy2)
scale2 = sqrt(var(windshieldy2)/n2)
n_samples <- 100000
samples1 <- rtnew(n_samples, df=df1, mean = mu1, scale = scale1)
samples2 <- rtnew(n_samples, df=df2, mean = mu2, scale = scale2)
mu_d <- mu1 - mu2
#mu_d = mean(samples1-samples2)
paste0("Difference in the means are: ", mu_d)
mu_d_interval = function(samples1, samples2, prob){
low = (1-prob)/2
high = prob+low
int = c(low,high)
sample = samples1-samples2
res = quantile(sample, int)
}
interval = mu_d_interval(samples1 = samples1, samples2 = samples2, 0.95)
paste0("Interval low: ", interval[1], " and high: ", interval[2])
hist(samples1-samples2,
breaks=50)
abline(v = interval[1], col='red')
abline(v = interval[2], col='red')
abline(v = mu_d, col='blue')
legend(0.2 ,8000, legend=c("Data", "95-Interval", "mu_d"),col=c("grey", "red", "blue"), lty=1, cex=0.8)
