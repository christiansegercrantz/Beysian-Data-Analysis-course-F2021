n=100
warmup_procent = 0.5
alpha1 = mu[1]
alpha2 = mu[1]+sqrt(sigma[1,1])
alpha3 = mu[1]-sqrt(sigma[1,1])
beta1 = mu[2]
beta2 = mu[2] + sqrt(sigma[2,2])
beta3 = mu[2] - sqrt(sigma[2,2])
thetas1 = Metropolis_bioassay(n, alpha1, beta1, warmup_procent)
thetas2 = Metropolis_bioassay(n, alpha2, beta2, warmup_procent)
thetas3 = Metropolis_bioassay(n, alpha3, beta3, warmup_procent)
plot(thetas1[,1],
type='l',
col='red',
ylab='alpha')
lines(thetas2[,1],
type='l',
col='blue')
lines(thetas3[,1],
type='l',
col='black')
plot(thetas1[,2],
type='l',
col='red',
ylab='beta')
lines(thetas2[,2],
type='l',
col='blue')
lines(thetas3[,2],
type='l',
col='black')
alphas = cbind(thetas1[,1],thetas2[,1],thetas3[,1])
alpha_Rhat = Rhat(alphas)
betas = cbind(thetas1[,2],thetas2[,2],thetas3[,2])
betas_Rhat = Rhat(betas)
plot(thetas1[,1], thetas1[,2],
col='red',
xlab='alpha',
ylab="beta",
main="Draws of the parameters")
points(thetas2[,1], thetas2[,2], col='red')
points(thetas3[,1], thetas3[,2], col='red')
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 5")
library(aaltobda)
data("bioassay")
library("rstan")
corr = 0.6
a_std = 2
b_std = 10
mu = c(0,10)
sigma = matrix( c(a_std^2, a_std*b_std*corr, a_std*b_std*corr, b_std^2),nrow = 2)
density_ratio = function(alpha_propose, alpha_previous, beta_propose, beta_previous, x, y, n){
likli_propose <- bioassaylp(alpha_propose, beta_propose, x, y, n)
likli_previous <- bioassaylp(alpha_previous, beta_previous, x, y, n)
prior_prop <- dmvnorm(c(alpha_propose,beta_propose),mu, sigma, log = TRUE)
prior_prev <- dmvnorm(c(alpha_previous,beta_previous),mu, sigma, log = TRUE)
prop = prior_prop + likli_propose
prev = prior_prev + likli_previous
res = exp(prop - prev)
return(res)
}
#Test1
density_ratio(alpha_propose = 1.89, alpha_previous = 0.374,
beta_propose = 24.76, beta_previous = 20.04,
x = bioassay$x, y = bioassay$y, n = bioassay$n)
#Test2
density_ratio(alpha_propose = 0.374, alpha_previous = 1.89,
beta_propose = 20.04, beta_previous = 24.76,
x = bioassay$x, y = bioassay$y, n = bioassay$n)
Metropolis_bioassay = function(n, alpha_previous, beta_previous, warmup_procent = 0.5){
alphas = c()
betas = c()
for( i in 1:n){
alpha_propose = rnorm(1, alpha_previous, 1)
beta_propose = rnorm(1, beta_previous, 5)
r = density_ratio(alpha_propose = alpha_propose, alpha_previous = alpha_previous, beta_propose = beta_propose, beta_previous = beta_previous, x = bioassay$x, y = bioassay$y, n = bioassay$n)
r = min(1,r)
if(r >= runif(1)){
alpha_previous = alpha_propose
beta_previous = beta_propose
}
alphas[i] = alpha_previous
betas[i] = beta_previous
}
alpha_final = na.omit(alphas[n*warmup_procent+1:n])
beta_final = na.omit(betas[n*warmup_procent+1:n])
return(cbind(alpha_final,beta_final))
}
n=2000
warmup_procent = 0.5
alpha1 = mu[1]
alpha2 = mu[1]+sqrt(sigma[1,1])
alpha3 = mu[1]-sqrt(sigma[1,1])
beta1 = mu[2]
beta2 = mu[2] + sqrt(sigma[2,2])
beta3 = mu[2] - sqrt(sigma[2,2])
thetas1 = Metropolis_bioassay(n, alpha1, beta1, warmup_procent)
thetas2 = Metropolis_bioassay(n, alpha2, beta2, warmup_procent)
thetas3 = Metropolis_bioassay(n, alpha3, beta3, warmup_procent)
plot(thetas1[,1],
type='l',
col='red',
ylab='alpha')
lines(thetas2[,1],
type='l',
col='blue')
lines(thetas3[,1],
type='l',
col='black')
plot(thetas1[,2],
type='l',
col='red',
ylab='beta')
lines(thetas2[,2],
type='l',
col='blue')
lines(thetas3[,2],
type='l',
col='black')
alphas = cbind(thetas1[,1],thetas2[,1],thetas3[,1])
alpha_Rhat = Rhat(alphas)
betas = cbind(thetas1[,2],thetas2[,2],thetas3[,2])
betas_Rhat = Rhat(betas)
plot(thetas1[,1], thetas1[,2],
col='red',
xlab='alpha',
ylab="beta",
main="Draws of the parameters")
points(thetas2[,1], thetas2[,2], col='red')
points(thetas3[,1], thetas3[,2], col='red')
?bioassaylp
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 6")
library(aaltobda)
library("rstan")
data("bioassay")
?bioassaylp
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 6")
library(aaltobda)
library("rstan")
data("drowning")
drowning
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7stan.stan")
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7stan.stan")
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7.stan")
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7.stan")
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7.stan")
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7.stan")
sigma = 69/5.15
length(drowning)
length(drowning[1])
length(drowning[1,])
length(drowning[,1])
N = length(drowning[,1])
sigma = (N*138)/5.15
sigma = (sqrt(N)'*138)/5.15
sigma = (sqrt(N)*138)/5.15
sigma = (sqrt(N)*138)/5.15
sigma = (sqrt(N)*138)/5.15
?rnorm
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = (N^2*(0-(-69)))/(5.15/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = (N^2*(69-(-69)))/(5.15/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
mean(drowning[1,])
drowning[1,]
drowning[,1]
mean(drowning[,2])
mu = mean(drowning[,2])
c = 0.99
sigma = sqrt(N)(5.15-mu)/(1-c)/2
sigma = sqrt(N)*(5.15-mu)/(1-c)/2
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = sqrt(N)*(139-mu)/(1-c)/2
sigma = sqrt(N)*(69-mu)/(1-c)/2
sigma = sqrt(N)*(69-mu)/(1-c)/2
sigma = sqrt(N)*(139-mu)/(1-c)/2
sigma = sqrt(N)*(139-mu)/((1-c)/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = sqrt(N)*(139-69)/((1-c)/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = 69*sqrt(N)/((1-c)/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
mu_hist = 138
c = 0.99
sigma = 69*sqrt(N)/((1-c)/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
0+2.576*12/sqrt(40)
0+2.576*120/sqrt(40)
qnorm(c(0.01,0.99), mean= 0, sd = 1)
sigma = mu_hist/(5.15/2)
qnorm(c(0.01,0.99), mean= 0, sd = 1)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
qnorm(c(0.01,0.99), mean= 0, sd = sqrt(sigma))
sigma = mu_hist/(5.15/2)
sigma = mu_hist/2 -0/(5.15/2)
sigma = (mu_hist/2-0)/(5.15/2)
sigma = (mu_hist/2-mu)/(5.15/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = (mu_hist/2-0)/(5.15/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = (mu_hist/2-mu)/(5.15/2)
sigma = (mu_hist/2-0)/(5.15/2)
mu = 0
c = 0.99
sigma = (mu_hist/2-mu)/(5.15/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = (mu_hist/2-mu)/(2.58/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = (mu_hist/2-mu)/(2.58)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
qnorm(0.995)
(1-0.99)/2
sigma = (mu_hist/2-mu)/(z)
z = qnorm(0.995)
sigma = (mu_hist/2-mu)/(z)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
prob <- qnorm(0.995)
sigma_beta <- 69/prob
qnorm(c(0.01,0.995), mean= 0, sd = sigma)
qnorm(c(0.005,0.995), mean= 0, sd = sigma)
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7.stan")
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7.stan")
head(drowning)
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 6")
library(aaltobda)
library("rstan")
data("drowning")
rm(list = ls())
#setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7")
library(aaltobda)
library("rstan")
data("drowning")
rm(list = ls())
library(aaltobda)
library("rstan")
data("drowning")
N = length(drowning[,1])
mu_hist = 138
mu = 0
c = 0.99
z = qnorm(0.995)
sigma_beta = (mu_hist/2-mu)/(z)
qnorm(c(0.005,0.995), mean= 0, sd = sigma)
qnorm(c(0.005,0.995), mean= 0, sd = sigma_beta)
N = length(drowning[,1])
mu_hist = 138
mu = 0
c = 0.99
z = qnorm(0.995)
sigma_beta = (mu_hist/2-mu)/(z)
qnorm(c(0.005,0.995), mean= 0, sd = sigma_beta)
rm(list = ls())
library(aaltobda)
library("rstan")
data("drowning")
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7.stan")
rm(list = ls())
library(aaltobda)
library("rstan")
data("drowning")
N = length(drowning[,1])
mu_hist = 138
mu = 0
c = 0.99
z = qnorm(0.995)
sigma_beta = (mu_hist/2-mu)/(z)
qnorm(c(0.005,0.995), mean= 0, sd = sigma_beta)
mu <- mean(drowning[,2])
sigma <- var(drowning[,2])
data <- list(
N = length(drowning$drownings), #Number of data points
x = drowning$year,              #Year
y = drowning$drownings,         #Amount of drownings
mu = mu,                        #Mean vector
sigma = sigma,                   #Covariance matrix
simga_beta=sigma_beta           #Variance of beta
)
fit1 = sampling(stanmodel,
data = data,            # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
refresh = 0             # no progress shown
)
fit1 = sampling(stanmodel,
data = data,            # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
refresh = 0             # no progress shown
)
fit1 = sampling(stanmodel,
data = data,            # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
refresh = 0             # no progress shown
)
N = length(drowning[,1])
mu_hist = 138
mu = 0
c = 0.99
z = qnorm(0.99)
sigma_beta = (mu_hist/2-mu)/(z)
qnorm(c(0.01,0.99), mean= 0, sd = sigma_beta)
sigma_beta
138/2
rm(list = ls())
library(aaltobda)
library("rstan")
data("drowning")
N = length(drowning[,1])
mu_hist = 138
mu = 0
z = qnorm(0.995)
sigma_beta = (mu_hist/2-mu)/z
qnorm(c(0.005,0.995), mean= 0, sd = sigma_beta)
mu <- mean(drowning[,2])
sigma <- var(drowning[,2])
data <- list(
N = length(drowning$drownings), #Number of data points
x = drowning$year,              #Year
y = drowning$drownings,         #Amount of drownings
mu = mu,                        #Mean vector
sigma = sigma,                   #Covariance matrix
simga_beta=sigma_beta           #Variance of beta
)
fit1 = sampling(stanmodel,
data = data,            # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
refresh = 0             # no progress shown
)
sigma_beta = (mu_hist/2-mu_beta)/z
mu_beta = 0
z = qnorm(0.995)
sigma_beta = (mu_hist/2-mu_beta)/z
qnorm(c(0.005,0.995), mean= 0, sd = sigma_beta)
mu_hist = 138
mu_beta = 0
z = qnorm(0.995)
sigma_beta = (mu_hist/2-mu_beta)/z
qnorm(c(0.005,0.995), mean= 0, sd = sigma_beta)
mu_hist = 138
mu_beta = 0
z = qnorm(0.995)
sigma_beta = (mu_hist/2-mu_beta)/z
#qnorm(c(0.005,0.995), mean= 0, sd = sigma_beta)
data <- list(
N = length(drowning$drownings), #Number of data points
x = drowning$year,              #Year
y = drowning$drownings,         #Amount of drownings
xpred = 2020                    #Year(s) to predict
mu = mu,                        #Mean vector
data <- list(
N = length(drowning$drownings), #Number of data points
x = drowning$year,              #Year
y = drowning$drownings,         #Amount of drownings
xpred = 2020,                   #Year(s) to predict
mu = mu,                        #Mean vector
sigma = sigma,                  #Covariance matrix
simga_beta=sigma_beta           #Variance of beta
)
fit1 = sampling(stanmodel,
data = data,            # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
refresh = 0             # no progress shown
)
fit1 = sampling(stanmodel,
data = data,            # named list of data
#chains = 4,             # number of Markov chains
#warmup = 1000,          # number of warmup iterations per chain
#iter = 2000,            # total number of iterations per chain
#cores = 1,              # number of cores (could use one per chain)
#refresh = 0             # no progress shown
)
fit1
fit1 = sampling(stanmodel,
data = data,            # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
refresh = 0             # no progress shown
)
fit1
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 6")
library(aaltobda)
library("rstan")
data("bioassay")
corr = 0.6
a_std = 2
b_std = 10
mu = c(0,10)
sigma = matrix( c(a_std^2, a_std*b_std*corr, a_std*b_std*corr, b_std^2),nrow = 2)
data <- list(
N = length(bioassay$x), #Number of data points
x = bioassay$x,         #Outcome
n = bioassay$n,         #Total draws
y = bioassay$y,         #Successes
mu = mu,                #Mean vector
sigma = sigma           #Covariance matrix
)
fit1 = sampling(stanmodel,
data = data,            # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
refresh = 0             # no progress shown
)
print(fit1)
plot(fit1, probs=c(.05,.5,.95))
traceplot(fit1, inc_warmup = TRUE, nrow = 2)
diagnostics = monitor(fit1)
theta = extract(fit1)$theta
alpha = theta[,1]
beta = theta[,2]
plot(alpha,beta)
rm(list = ls())
library(aaltobda)
library("rstan")
data("drowning")
mu_hist = 138
mu_beta = 0
z = qnorm(0.995)
sigma_beta = (mu_hist/2-mu_beta)/z
#qnorm(c(0.005,0.995), mean= 0, sd = sigma_beta)
mu <- mean(drowning[,2])
sigma <- var(drowning[,2])
data <- list(
N = length(drowning$drownings), #Number of data points
x = drowning$year,              #Year
y = drowning$drownings,         #Amount of drownings
xpred = 2020,                   #Year(s) to predict
mu = mu,                        #Mean vector
sigma = sigma,                  #Covariance matrix
simga_beta=sigma_beta           #Variance of beta
)
fit1 = sampling(stanmodel,
data = data,            # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
refresh = 0             # no progress shown
)
print(fit1)
```{r}
plot(fit1$beta)
fit1$beta
plot(fit1$beta)
traceplot(fit1, inc_warmup = TRUE, nrow = 2)
traceplot(fit1, inc_warmup = FALSE, nrow = 4)
plot(fit1, inc_warmup = FALSE, nrow = 4)
#alpha = theta[,1]
#beta = theta[,2]
hist(beta)
extract(fit1)$beta
?hist
hist(alpha)
typeof(beta)
plot(beta)
plot(alpha,beta)
plot(drowning$year,drowning$drownings)
rm(list = ls())
library(aaltobda)
library("rstan")
data("drowning")
mu_hist = 138
mu_beta = 0
z = qnorm(0.995)
sigma_beta = (mu_hist/2-mu_beta)/z
#qnorm(c(0.005,0.995), mean= 0, sd = sigma_beta)
mu <- mean(drowning[,2])
sigma <- var(drowning[,2])
data <- list(
N = length(drowning$drownings), #Number of data points
x = drowning$year,              #Year
y = drowning$drownings,         #Amount of drownings
xpred = 2020,                   #Year(s) to predict
mu = mu,                        #Mean vector
sigma = sigma,                  #Covariance matrix
simga_beta=sigma_beta,          #Variance of beta
mu_alpha = ,
sigma_alpha
)
data <- list(
N = length(drowning$drownings), #Number of data points
x = drowning$year,              #Year
y = drowning$drownings,         #Amount of drownings
xpred = 2020,                   #Year(s) to predict
mu = mu,                        #Mean vector
sigma = sigma,                  #Covariance matrix
simga_beta=sigma_beta,          #Variance of beta
mu_alpha = 0,
sigma_alpha = 1
)
