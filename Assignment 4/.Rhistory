n1 = length(windshieldy1)
df1 = n1 - 1
mu1 = mu_point_est(windshieldy1)
scale1 = sqrt(var(windshieldy1)/n1)
n2 = length(windshieldy2)
df2 = n2 - 1
mu2 = mu_point_est(windshieldy2)
scale2 = sqrt(var(windshieldy2)/n2)
n_samples <- 100000
samples1 <- rtnew(n_samples, df=df1, mean = mu1, scale = scale1)
samples2 <- rtnew(n_samples, df=df2, mean = mu2, scale = scale2)
mu_d <- mu1 - mu2
#mu_d = mean(samples1-samples2)
paste0("Difference in the means are: ", mu_d)
mu_d_interval = function(samples1, samples2, prob){
low = (1-prob)/2
high = prob+low
int = c(low,high)
sample = samples1-samples2
res = quantile(sample, int)
}
interval = mu_d_interval(samples1 = samples1, samples2 = samples2, 0.95)
paste0("Interval low: ", interval[1], " and high: ", interval[2])
hist(samples1-samples2,
breaks=50)
abline(v = interval[1], col='red')
abline(v = interval[2], col='red')
abline(v = mu_d, col='blue')
legend(0,8000, legend=c("Data", "95-Interval", "mu_d"),col=c("grey", "red", "blue"), lty=1, cex=0.8)
For any continuous variable, the probability to take on a exact value is 0. Hence is the probability of $P(\mu_d = 0) = 0$
1+674-39
680+1-22
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 4")
library(aaltobda)
cov = matrix( c(a_std^2, a_std*b_std*corr, b_std^2, a_std*b_std*corr) ,nrwow = 2)
cov = matrix( c(a_std^2, a_std*b_std*corr, b_std^2, a_std*b_std*corr),nrow = 2)
mean = c(0,10)
corr = 0.6
a_std = 2
b_std = 10
cov = matrix( c(a_std^2, a_std*b_std*corr, b_std^2, a_std*b_std*corr),nrow = 2)
mean = c(0,10)
corr = 0.6
a_std = 2
b_std = 10
cov = matrix( c(a_std^2, a_std*b_std*corr, b_std^2, a_std*b_std*corr),nrow = 2)
cov
mean = c(0,10)
corr = 0.6
a_std = 2
b_std = 10
cov = matrix( c(a_std^2, a_std*b_std*corr, b_std^2, a_std*b_std*corr),ncol = 2)
cov
cov = matrix( c(a_std^2, a_std*b_std*corr, a_std*b_std*corr, b_std^2),nrow = 2)
cov
mean = c(0,10)
corr = 0.6
a_std = 2
b_std = 10
cov = matrix( c(a_std^2, a_std*b_std*corr, a_std*b_std*corr, b_std^2),nrow = 2)
cov
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 4")
library(aaltobda)
data("bioassay_posterior")
mean = c(0,10)
corr = 0.6
a_std = 2
b_std = 10
cov = matrix( c(a_std^2, a_std*b_std*corr, a_std*b_std*corr, b_std^2),nrow = 2)
mean
cov
alpha_mean = mean(bioassay_posterior$alpha)
beta_mean = mean(bioassay_posterior$beta)
alpha_interval_5 = quantile(c(0.475, 0.525), bioassay_posterior$alpha)
alpha_mean = mean(bioassay_posterior$alpha)
beta_mean = mean(bioassay_posterior$beta)
alpha_interval_5 = quantile(probs = c(0.475, 0.525), bioassay_posterior$alpha)
alpha_interval_95 = quantile(probs = c(0.025, 0.975), bioassay_posterior$alpha)
beta_interval_5 = quantile(c(0.475, 0.525), bioassay_posterior$beta)
alpha_mean = mean(bioassay_posterior$alpha)
beta_mean = mean(bioassay_posterior$beta)
alpha_interval_5 = quantile(probs = c(0.475, 0.525), bioassay_posterior$alpha)
alpha_interval_95 = quantile(probs = c(0.025, 0.975), bioassay_posterior$alpha)
beta_interval_5 = quantile(probs = c(0.475, 0.525), bioassay_posterior$beta)
beta_interval_95 = quantile(probs = c(0.025, 0.975), bioassay_posterior$beta)
alpha_mean = mean(bioassay_posterior$alpha)
beta_mean = mean(bioassay_posterior$beta)
alpha_interval_5 = quantile(probs = c(0.475, 0.525), data =  bioassay_posterior$alpha)
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 4")
library(aaltobda)
data("bioassay_posterior")
mean = c(0,10)
corr = 0.6
a_std = 2
b_std = 10
cov = matrix( c(a_std^2, a_std*b_std*corr, a_std*b_std*corr, b_std^2),nrow = 2)
mean
cov
alpha_mean = mean(bioassay_posterior$alpha)
beta_mean = mean(bioassay_posterior$beta)
alpha_interval_5 = quantile(probs = c(0.475, 0.525), data =  bioassay_posterior$alpha)
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 4")
library(aaltobda)
data("bioassay_posterior")
mean = c(0,10)
corr = 0.6
a_std = 2
b_std = 10
cov = matrix( c(a_std^2, a_std*b_std*corr, a_std*b_std*corr, b_std^2),nrow = 2)
mean
cov
alpha_mean = mean(bioassay_posterior$alpha)
beta_mean = mean(bioassay_posterior$beta)
alpha_interval_5 = quantile(probs = c(0.475, 0.525), bioassay_posterior$alpha)
alpha_interval_95 = quantile(probs = c(0.025, 0.975), bioassay_posterior$alpha)
beta_interval_5 = quantile(probs = c(0.475, 0.525), bioassay_posterior$beta)
beta_interval_95 = quantile(probs = c(0.025, 0.975), bioassay_posterior$beta)
alpha_mean_MSCE = sqrt(var(bioassay_posterior$alpha)/length(bioassay_posterior$alpha))
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 4")
library(aaltobda)
data("bioassay_posterior")
mean = c(0,10)
corr = 0.6
a_std = 2
b_std = 10
cov = matrix( c(a_std^2, a_std*b_std*corr, a_std*b_std*corr, b_std^2),nrow = 2)
mean
cov
alpha_mean = mean(bioassay_posterior$alpha)
beta_mean = mean(bioassay_posterior$beta)
alpha_interval_5 = quantile(probs = c(0.475, 0.525), bioassay_posterior$alpha)
alpha_interval_95 = quantile(probs = c(0.025, 0.975), bioassay_posterior$alpha)
beta_interval_5 = quantile(probs = c(0.475, 0.525), bioassay_posterior$beta)
beta_interval_95 = quantile(probs = c(0.025, 0.975), bioassay_posterior$beta)
alpha_mean_MSCE = sqrt(var(bioassay_posterior$alpha)/length(bioassay_posterior$alpha))
beta_mean_MSCE = sqrt(var(bioassay_posterior$beta)/length(bioassay_posterior$beta))
?mcse_quantile
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 4")
library(aaltobda)
data("bioassay_posterior")
mean = c(0,10)
corr = 0.6
a_std = 2
b_std = 10
cov = matrix( c(a_std^2, a_std*b_std*corr, a_std*b_std*corr, b_std^2),nrow = 2)
mean
cov
alpha_mean = mean(bioassay_posterior$alpha)
beta_mean = mean(bioassay_posterior$beta)
alpha_interval_5 = quantile(probs = c(0.475, 0.525), bioassay_posterior$alpha)
alpha_interval_95 = quantile(probs = c(0.025, 0.975), bioassay_posterior$alpha)
beta_interval_5 = quantile(probs = c(0.475, 0.525), bioassay_posterior$beta)
beta_interval_95 = quantile(probs = c(0.025, 0.975), bioassay_posterior$beta)
alpha_mean_MSCE = sqrt(var(bioassay_posterior$alpha)/length(bioassay_posterior$alpha))
beta_mean_MSCE = sqrt(var(bioassay_posterior$beta)/length(bioassay_posterior$beta))
alpha_interval_5_MSCE = mcse_quantile(bioassay_posterior$alpha, 5)
alpha_mean = mean(bioassay_posterior$alpha)
beta_mean = mean(bioassay_posterior$beta)
alpha_interval_5 = quantile(probs = c(0.475, 0.525), bioassay_posterior$alpha)
alpha_interval_95 = quantile(probs = c(0.025, 0.975), bioassay_posterior$alpha)
beta_interval_5 = quantile(probs = c(0.475, 0.525), bioassay_posterior$beta)
beta_interval_95 = quantile(probs = c(0.025, 0.975), bioassay_posterior$beta)
alpha_mean_MSCE = sqrt(var(bioassay_posterior$alpha)/length(bioassay_posterior$alpha))
beta_mean_MSCE = sqrt(var(bioassay_posterior$beta)/length(bioassay_posterior$beta))
alpha_interval_5_MSCE = mcse_quantile(bioassay_posterior$alpha, 0.05)
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 4")
library(aaltobda)
data("bioassay_posterior")
mean = c(0,10)
corr = 0.6
a_std = 2
b_std = 10
cov = matrix( c(a_std^2, a_std*b_std*corr, a_std*b_std*corr, b_std^2),nrow = 2)
mean
cov
alpha_mean = mean(bioassay_posterior$alpha)
beta_mean = mean(bioassay_posterior$beta)
alpha_interval_5 = quantile(probs = c(0.475, 0.525), bioassay_posterior$alpha)
alpha_interval_95 = quantile(probs = c(0.025, 0.975), bioassay_posterior$alpha)
beta_interval_5 = quantile(probs = c(0.475, 0.525), bioassay_posterior$beta)
beta_interval_95 = quantile(probs = c(0.025, 0.975), bioassay_posterior$beta)
alpha_mean_MSCE = sqrt(var(bioassay_posterior$alpha)/length(bioassay_posterior$alpha))
beta_mean_MSCE = sqrt(var(bioassay_posterior$beta)/length(bioassay_posterior$beta))
alpha_interval_5_MSCE = mcse_quantile(bioassay_posterior$alpha, 0.05)
alpha_interval_5_MSCE
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 4")
library(aaltobda)
data("bioassay_posterior")
mean = c(0,10)
corr = 0.6
a_std = 2
b_std = 10
cov = matrix( c(a_std^2, a_std*b_std*corr, a_std*b_std*corr, b_std^2),nrow = 2)
mean
cov
alpha_mean = mean(bioassay_posterior$alpha)
beta_mean = mean(bioassay_posterior$beta)
alpha_interval_5 = quantile(probs = c(0.475, 0.525), bioassay_posterior$alpha)
alpha_interval_95 = quantile(probs = c(0.025, 0.975), bioassay_posterior$alpha)
beta_interval_5 = quantile(probs = c(0.475, 0.525), bioassay_posterior$beta)
beta_interval_95 = quantile(probs = c(0.025, 0.975), bioassay_posterior$beta)
alpha_mean_MSCE = sqrt(var(bioassay_posterior$alpha)/length(bioassay_posterior$alpha))
beta_mean_MSCE = sqrt(var(bioassay_posterior$beta)/length(bioassay_posterior$beta))
alpha_interval_5_MSCE = mcse_quantile(bioassay_posterior$alpha, 0.05)
alpha_interval_95 = mcse_quantile(bioassay_posterior$alpha, 0.95)
beta_interval_5_MSCE = mcse_quantile(bioassay_posterior$beta, 0.05)
beta_interval_95_MSCE = mcse_quantile(bioassay_posterior$beta, 0.95)
View(beta_interval_5_MSCE)
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 4")
library(aaltobda)
data("bioassay_posterior")
mean = c(0,10)
corr = 0.6
a_std = 2
b_std = 10
cov = matrix( c(a_std^2, a_std*b_std*corr, a_std*b_std*corr, b_std^2),nrow = 2)
mean
cov
alpha_mean = mean(bioassay_posterior$alpha)
beta_mean = mean(bioassay_posterior$beta)
alpha_interval = quantile(probs = c(0.05, 0.95), bioassay_posterior$alpha)
beta_interval = quantile(probs = c(0.475, 0.525), bioassay_posterior$beta)
alpha_mean_MSCE = sqrt(var(bioassay_posterior$alpha)/length(bioassay_posterior$alpha))
beta_mean_MSCE = sqrt(var(bioassay_posterior$beta)/length(bioassay_posterior$beta))
alpha_interval_MSCE = mcse_quantile(bioassay_posterior$alpha, 0.9)
beta_interval_MSCE = mcse_quantile(bioassay_posterior$beta, 0.9)
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 4")
library(aaltobda)
data("bioassay_posterior")
data("bioassay")
mean = c(0,10)
corr = 0.6
a_std = 2
b_std = 10
cov = matrix( c(a_std^2, a_std*b_std*corr, a_std*b_std*corr, b_std^2),nrow = 2)
mean
cov
alpha_mean = mean(bioassay_posterior$alpha)
beta_mean = mean(bioassay_posterior$beta)
alpha_interval = quantile(probs = c(0.05, 0.95), bioassay_posterior$alpha)
beta_interval = quantile(probs = c(0.05, 0.95), bioassay_posterior$beta)
alpha_mean_MSCE = sqrt(var(bioassay_posterior$alpha)/length(bioassay_posterior$alpha))
beta_mean_MSCE = sqrt(var(bioassay_posterior$beta)/length(bioassay_posterior$beta))
alpha_interval_MSCE = mcse_quantile(bioassay_posterior$alpha, 0.9)
beta_interval_MSCE = mcse_quantile(bioassay_posterior$beta, 0.9)
log_importance_weights = function(alpha, beta){
}
#test case
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
round(log_importance_weights(alpha, beta),2)
?bioassaylp
bioassaylp(bioassay_posterior$alpha, bioassay_posterior$beta, bioassay$x, bioassay$y, bioassay$n)
log_importance_weights = function(alpha, beta){
bioassaylp(alpha, beta, bioassay$x, bioassay$y, bioassay$n)
}
#test case
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
round(log_importance_weights(alpha, beta),2)
log_importance_weights(bioassay_posterior$alpha, bioassay_posterior$beta)
liw = log_importance_weights(bioassay_posterior$alpha, bioassay_posterior$beta)
? rmvnorm
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 4")
library(aaltobda)
data("bioassay_posterior")
data("bioassay")
mean = c(0,10)
corr = 0.6
a_std = 2
b_std = 10
cov = matrix( c(a_std^2, a_std*b_std*corr, a_std*b_std*corr, b_std^2),nrow = 2)
mean
cov
alpha_mean = mean(bioassay_posterior$alpha)
beta_mean = mean(bioassay_posterior$beta)
alpha_interval = quantile(probs = c(0.05, 0.95), bioassay_posterior$alpha)
beta_interval = quantile(probs = c(0.05, 0.95), bioassay_posterior$beta)
alpha_mean_MSCE = sqrt(var(bioassay_posterior$alpha)/length(bioassay_posterior$alpha))
beta_mean_MSCE = sqrt(var(bioassay_posterior$beta)/length(bioassay_posterior$beta))
alpha_interval_MSCE = mcse_quantile(bioassay_posterior$alpha, 0.9)
beta_interval_MSCE = mcse_quantile(bioassay_posterior$beta, 0.9)
log_importance_weights = function(alpha, beta){
bioassaylp(alpha, beta, bioassay$x, bioassay$y, bioassay$n)
}
#test case
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
round(log_importance_weights(alpha, beta),2)
liw = log_importance_weights(bioassay_posterior$alpha, bioassay_posterior$beta)
normalized_importance_weights = function(alpha, beta){
liw = log_importance_weights(alpha,beta)
exp_liw = exp(liw)
norm_exp_liw = exp_liw/sum(exp_liw)
}
round(normalized_importance_weights(alpha = alpha, beta = beta),3)
normalized_importance_weights(bioassay_posterior$alpha,bioassay_posterior$beta)
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 4")
library(aaltobda)
data("bioassay_posterior")
data("bioassay")
mean = c(0,10)
corr = 0.6
a_std = 2
b_std = 10
cov = matrix( c(a_std^2, a_std*b_std*corr, a_std*b_std*corr, b_std^2),nrow = 2)
mean
cov
alpha_mean = mean(bioassay_posterior$alpha)
beta_mean = mean(bioassay_posterior$beta)
alpha_interval = quantile(probs = c(0.05, 0.95), bioassay_posterior$alpha)
beta_interval = quantile(probs = c(0.05, 0.95), bioassay_posterior$beta)
alpha_mean_MSCE = sqrt(var(bioassay_posterior$alpha)/length(bioassay_posterior$alpha))
beta_mean_MSCE = sqrt(var(bioassay_posterior$beta)/length(bioassay_posterior$beta))
alpha_interval_MSCE = mcse_quantile(bioassay_posterior$alpha, 0.9)
beta_interval_MSCE = mcse_quantile(bioassay_posterior$beta, 0.9)
log_importance_weights = function(alpha, beta){
bioassaylp(alpha, beta, bioassay$x, bioassay$y, bioassay$n)
}
#test case
alpha <- c(1.896, -3.6, 0.374, 0.964, -3.123, -1.581)
beta <- c(24.76, 20.04, 6.15, 18.65, 8.16, 17.4)
round(log_importance_weights(alpha, beta),2)
liw = log_importance_weights(bioassay_posterior$alpha, bioassay_posterior$beta)
normalized_importance_weights = function(alpha, beta){
liw = log_importance_weights(alpha,beta)
exp_liw = exp(liw)
norm_exp_liw = exp_liw/sum(exp_liw)
return(norm_exp_liw)
}
round(normalized_importance_weights(alpha = alpha, beta = beta),3)
normalized_importance_weights(bioassay_posterior$alpha,bioassay_posterior$beta)
niw = normalized_importance_weights(bioassay_posterior$alpha,bioassay_posterior$beta)
n=4000
rmvnorm(n, mean, cov)
n=4000
draws = rmvnorm(n, mean, cov)
#niw = normalized_importance_weights(draws[1])
draws[1]
draws[,1]
n=4000
draws = rmvnorm(n, mean, cov)
normal_niw = normalized_importance_weights(draws[,1], draws[,2])
n=4000
draws = rmvnorm(n, mean, cov)
normal_niw = normalized_importance_weights(draws[,1], draws[,2])
hist(normal_niw)
S_eff = function(alpha, beta){
niw = normalized_importance_weights(alpha,beta)
1/sum(niw^2)
}
round(S_eff(alpha = alpha, beta = beta),3)
round(S_eff(alpha = bioassay_posterior$alpha, beta = bioassay_posterior$beta),3)
posterior_mean = function(alpha, beta){
seff = S_eff(alpha,beta)
alpha_mean = mean(bioassay_posterior$alpha)
beta_mean = mean(bioassay_posterior$beta)
alpha_var = mean(bioassay_posterior$alpha^2) - alpha_mean^2
beta_var = mean(bioassay_posterior$beta^2) - beta_mean^2
alpha_mean_MSCE = sqrt(alpha_var/seff)
beta_mean_MSCE = sqrt(beta_var/seff)
}
posterior_mean = function(alpha, beta){
seff = S_eff(alpha,beta)
alpha_mean = mean(bioassay_posterior$alpha)
beta_mean = mean(bioassay_posterior$beta)
alpha_var = mean(bioassay_posterior$alpha^2) - alpha_mean^2
beta_var = mean(bioassay_posterior$beta^2) - beta_mean^2
alpha_mean_MSCE = sqrt(alpha_var/seff)
beta_mean_MSCE = sqrt(beta_var/seff)
return(c(alpha_mean,beta_mean))
}
round(posterior_mean(alpha = alpha, beta = beta),3)
posterior_mean = function(alpha, beta){
seff = S_eff(alpha,beta)
alpha_mean = mean(alpha)
beta_mean = mean(beta)
alpha_var = mean(alpha^2) - alpha_mean^2
beta_var = mean(beta^2) - beta_mean^2
alpha_mean_MSCE = sqrt(alpha_var/seff)
beta_mean_MSCE = sqrt(beta_var/seff)
return(c(alpha_mean,beta_mean))
}
round(posterior_mean(alpha = alpha, beta = beta),3)
posterior_mean = function(alpha, beta){
seff = S_eff(alpha,beta)
niw = normalized_importance_weights(alpha,beta)
alpha_mean = mean(niw*alpha)
beta_mean = mean(niw*beta)
alpha_var = mean(alpha^2) - alpha_mean^2
beta_var = mean(beta^2) - beta_mean^2
alpha_mean_MSCE = sqrt(alpha_var/seff)
beta_mean_MSCE = sqrt(beta_var/seff)
return(c(alpha_mean,beta_mean))
}
round(posterior_mean(alpha = alpha, beta = beta),3)
posterior_mean = function(alpha, beta){
seff = S_eff(alpha,beta)
niw = normalized_importance_weights(alpha,beta)
alpha_mean = mean(alpha)
beta_mean = mean(beta)
alpha_var = mean(alpha^2) - alpha_mean^2
beta_var = mean(beta^2) - beta_mean^2
alpha_mean_MSCE = sqrt(alpha_var/seff)
beta_mean_MSCE = sqrt(beta_var/seff)
return(c(alpha_mean,beta_mean))
}
round(posterior_mean(alpha = alpha, beta = beta),3)
posterior_mean = function(alpha, beta){
seff = S_eff(alpha,beta)
niw = normalized_importance_weights(alpha,beta)
alpha_mean = mean(niw*alpha)/mean(niw)
beta_mean = mean(beta)/mean(niw)
alpha_var = mean(alpha^2) - alpha_mean^2
beta_var = mean(beta^2) - beta_mean^2
alpha_mean_MSCE = sqrt(alpha_var/seff)
beta_mean_MSCE = sqrt(beta_var/seff)
return(c(alpha_mean,beta_mean))
}
round(posterior_mean(alpha = alpha, beta = beta),3)
posterior_mean = function(alpha, beta){
seff = S_eff(alpha,beta)
niw = normalized_importance_weights(alpha,beta)
alpha_mean = mean(niw*alpha)/mean(niw)
beta_mean = mean(niw*beta)/mean(niw)
alpha_var = mean(alpha^2) - alpha_mean^2
beta_var = mean(beta^2) - beta_mean^2
alpha_mean_MSCE = sqrt(alpha_var/seff)
beta_mean_MSCE = sqrt(beta_var/seff)
return(c(alpha_mean,beta_mean))
}
round(posterior_mean(alpha = alpha, beta = beta),3)
post_mean = round(posterior_mean(bioassay_posterior$alpha,bioassay_posterior$beta),3)
library(markmyassignment)
assignment_path <-
paste("https://github.com/avehtari/BDA_course_Aalto/",
"blob/master/assignments/tests/assignment4.yml", sep="")
set_assignment(assignment_path)
# To check your code/functions, just run
mark_my_assignment()
library(markmyassignment)
assignment_path <-
paste("https://github.com/avehtari/BDA_course_Aalto/",
"blob/master/assignments/tests/assignment4.yml", sep="")
set_assignment(assignment_path)
# To check your code/functions, just run
mark_my_assignment()
posterior_mean = function(alpha, beta){
seff = S_eff(alpha,beta)
niw = normalized_importance_weights(alpha,beta)
alpha_mean = mean(niw*alpha)/mean(niw)
beta_mean = mean(niw*beta)/mean(niw)
alpha_var = mean(niw*alpha^2)/mean(niw) - alpha_mean^2
beta_var = mean(niw*alpha^2)/mean(niw) - beta_mean^2
alpha_mean_MSCE = sqrt(alpha_var/seff)
beta_mean_MSCE = sqrt(beta_var/seff)
res = list(alpha_mean = alpha_mean, beta_mean = beta_mean, alpha_mean_MSCE, beta_mean_MSCE)
return(res)
}
round(posterior_mean(alpha = alpha, beta = beta),3)
round(posterior_mean(alpha = alpha, beta = beta),3)
round(posterior_mean(alpha = alpha, beta = beta),3)
posterior_mean = function(alpha, beta){
seff = S_eff(alpha,beta)
niw = normalized_importance_weights(alpha,beta)
alpha_mean = mean(niw*alpha)/mean(niw)
beta_mean = mean(niw*beta)/mean(niw)
alpha_var = mean(niw*alpha^2)/mean(niw) - alpha_mean^2
beta_var = mean(niw*beta^2)/mean(niw) - beta_mean^2
alpha_mean_MSCE = sqrt(alpha_var/seff)
beta_mean_MSCE = sqrt(beta_var/seff)
res = list(alpha_mean = alpha_mean, beta_mean = beta_mean, alpha_mean_MSCE, beta_mean_MSCE)
return(res)
}
round(posterior_mean(alpha = alpha, beta = beta),3)
posterior_mean(alpha = alpha, beta = beta)
posterior_mean(alpha = alpha, beta = beta)
post_mean = posterior_mean(bioassay_posterior$alpha,bioassay_posterior$beta)
post_mean = posterior_mean(bioassay_posterior$alpha,bioassay_posterior$beta)
post_mean
posterior_mean = function(alpha, beta){
seff = S_eff(alpha,beta)
niw = normalized_importance_weights(alpha,beta)
alpha_mean = mean(niw*alpha)/mean(niw)
beta_mean = mean(niw*beta)/mean(niw)
alpha_var = mean(niw*alpha^2)/mean(niw) - alpha_mean^2
beta_var = mean(niw*beta^2)/mean(niw) - beta_mean^2
alpha_mean_MSCE = sqrt(alpha_var/seff)
beta_mean_MSCE = sqrt(beta_var/seff)
res = list(alpha_mean = alpha_mean, beta_mean = beta_mean, alpha_mean_MSCE = alpha_mean_MSCE, beta_mean_MSCE = beta_mean_MSCE)
return(res)
}
post_mean = posterior_mean(bioassay_posterior$alpha,bioassay_posterior$beta)
post_mean
posterior_mean(alpha = alpha, beta = beta)
post_mean = posterior_mean(draws[,1],draws[,2])
post_mean
post_mean$alpha
post_mean$alpha_mean
isess = S_eff(alpha = draws[,1], beta = draws[,2])
