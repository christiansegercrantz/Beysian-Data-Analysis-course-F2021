sigma2=0.01
alpha=mu*((mu*(1-mu)/sigma2)-1)
beta=alpha*(1-mu)/mu
x = seq(from=0,to=1, by=0.01)
betapdf = dbeta(x,alpha,beta)
plot(x, betapdf, type='l', main='Beta-distribution PDF')
n = 1000
sample = rbeta(n,alpha,beta)
hist(sample)
mean = mean(sample)
variance = var(sample)
paste0("Sample mean: ", mean)
paste0("Sample variance: ",variance)
CI95=quantile(sample,probs=c(0.025,0.975))
plot(x,betapdf, type='l', main='Beta-distribution PDF')
abline(v = CI95[[1]], lty = 2)
abline(v = CI95[[2]], lty = 2)
rm(list = ls())
P_test_pos_con_cancer_pos = 0.98
P_test_neg_con_cancer_neg = 0.96
P_cancer_pos = 1/1000
P_cancer_neg = 1 - P_cancer_pos
P_test_neg_con_cancer_pos = 1 - P_test_pos_con_cancer_pos
P_test_pos_con_cancer_neg = 1 - P_test_neg_con_cancer_neg
P_test_pos_and_cancer_pos = P_test_pos_con_cancer_pos * P_cancer_pos
P_test_neg = P_test_neg_con_cancer_neg * P_cancer_neg + P_test_neg_con_cancer_pos * P_cancer_pos
P_test_pos = 1-P_test_neg
P_cancer_pos_con_test_neg = (P_test_neg_con_cancer_pos * P_cancer_pos) /  P_test_neg
P_cancer_pos_con_test_pos = P_test_pos_con_cancer_pos * P_cancer_pos/ P_test_pos
cat(paste0("P(cancer=positive|test=neg)=",round(P_cancer_pos_con_test_neg*100,4),"%\n"),sep="")
cat(paste0("P(cancer=positive|test=positive) = ",round(P_cancer_pos_con_test_pos*100,4),"%"),sep="")
rm(list = ls())
p_red = function(boxes){
P_A = 0.4
P_B = 0.1
P_C = 1 - P_A - P_B
P_red_con_A = boxes[1,1]/rowSums(boxes)[1]
P_red_con_B = boxes[2,1]/rowSums(boxes)[2]
P_red_con_C = boxes[3,1]/rowSums(boxes)[3]
res = P_red_con_A*P_A + P_B*P_red_con_B + P_red_con_C * P_C
return(res)
}
boxes <- matrix(c(2,4,1,5,1,3), ncol = 2,dimnames = list(c("A", "B", "C"), c("red", "white")))
p_red(boxes = boxes)
p_box = function(boxes){
P_A = 0.4
P_B = 0.1
P_C = 1 - P_A - P_B
P_red_res = p_red(boxes = boxes)
P_red_con_A = boxes[1,1]/rowSums(boxes)[1]
P_red_con_B = boxes[2,1]/rowSums(boxes)[2]
P_red_con_C = boxes[3,1]/rowSums(boxes)[3]
P_A_con_red = P_red_con_A * P_A / P_red_res
P_B_con_red = P_red_con_B * P_B / P_red_res
P_C_con_red = P_red_con_C * P_C / P_red_res
res = c(P_A_con_red,P_B_con_red,P_C_con_red)
return(res)
}
p_box(boxes = boxes)
p_identical_twin = function(fraternal_prob, identical_prob){
P_boy = 1/2
P_ident_and_twin_boy = P_boy*identical_prob
P_frat_and_twin_boy = P_boy*P_boy*fraternal_prob
P_ident_con_twin_boy = P_ident_and_twin_boy/(P_ident_and_twin_boy+P_frat_and_twin_boy)
return(P_ident_con_twin_boy)
}
P_res = p_identical_twin(fraternal_prob = 1/150, identical_prob = 1/400)
paste0("Probability of identical twin: ", round(P_res,4)*100,"%")
rm(list = ls())
mu = 0.2
sigma2=0.01
alpha=mu*((mu*(1-mu)/sigma2)-1)
beta=alpha*(1-mu)/mu
x = seq(from=0,to=1, by=0.01)
betapdf = dbeta(x,alpha,beta)
plot(x, betapdf, type='l', main='Beta-distribution PDF')
n = 1000
sample = rbeta(n,alpha,beta)
hist(sample)
mean = mean(sample)
variance = var(sample)
paste0("Sample mean: ", mean)
paste0("Sample variance: ",variance)
CI95=quantile(sample,probs=c(0.025,0.975))
plot(x,betapdf, type='l', main='Beta-distribution PDF')
abline(v = CI95[[1]], lty = 2)
abline(v = CI95[[2]], lty = 2)
rm(list = ls())
P_test_pos_con_cancer_pos = 0.98
P_test_neg_con_cancer_neg = 0.96
P_cancer_pos = 1/1000
P_cancer_neg = 1 - P_cancer_pos
P_test_neg_con_cancer_pos = 1 - P_test_pos_con_cancer_pos
P_test_pos_con_cancer_neg = 1 - P_test_neg_con_cancer_neg
P_test_pos_and_cancer_pos = P_test_pos_con_cancer_pos * P_cancer_pos
P_test_neg = P_test_neg_con_cancer_neg * P_cancer_neg + P_test_neg_con_cancer_pos * P_cancer_pos
P_test_pos = 1-P_test_neg
P_cancer_pos_con_test_neg = (P_test_neg_con_cancer_pos * P_cancer_pos) /  P_test_neg
P_cancer_pos_con_test_pos = P_test_pos_con_cancer_pos * P_cancer_pos/ P_test_pos
cat(paste0("P(cancer=positive|test=neg)=",round(P_cancer_pos_con_test_neg*100,4),"%\n"),sep="")
cat(paste0("P(cancer=positive|test=positive) = ",round(P_cancer_pos_con_test_pos*100,4),"%"),sep="")
rm(list = ls())
p_red = function(boxes){
P_A = 0.4
P_B = 0.1
P_C = 1 - P_A - P_B
P_red_con_A = boxes[1,1]/rowSums(boxes)[1]
P_red_con_B = boxes[2,1]/rowSums(boxes)[2]
P_red_con_C = boxes[3,1]/rowSums(boxes)[3]
res = P_red_con_A*P_A + P_B*P_red_con_B + P_red_con_C * P_C
return(res)
}
boxes <- matrix(c(2,4,1,5,1,3), ncol = 2,dimnames = list(c("A", "B", "C"), c("red", "white")))
p_red(boxes = boxes)
p_box = function(boxes){
P_A = 0.4
P_B = 0.1
P_C = 1 - P_A - P_B
P_red_res = p_red(boxes = boxes)
P_red_con_A = boxes[1,1]/rowSums(boxes)[1]
P_red_con_B = boxes[2,1]/rowSums(boxes)[2]
P_red_con_C = boxes[3,1]/rowSums(boxes)[3]
P_A_con_red = P_red_con_A * P_A / P_red_res
P_B_con_red = P_red_con_B * P_B / P_red_res
P_C_con_red = P_red_con_C * P_C / P_red_res
res = c(P_A_con_red,P_B_con_red,P_C_con_red)
return(res)
}
p_box(boxes = boxes)
p_identical_twin = function(fraternal_prob, identical_prob){
P_boy = 1/2
P_ident_and_twin_boy = P_boy*identical_prob
P_frat_and_twin_boy = P_boy*P_boy*fraternal_prob
P_ident_con_twin_boy = P_ident_and_twin_boy/(P_ident_and_twin_boy+P_frat_and_twin_boy)
return(P_ident_con_twin_boy)
}
P_res = p_identical_twin(fraternal_prob = 1/150, identical_prob = 1/400)
paste0("Probability of identical twin: ", round(P_res,4)*100,"%")
rm(list = ls())
mu = 0.2
sigma2=0.01
alpha=mu*((mu*(1-mu)/sigma2)-1)
beta=alpha*(1-mu)/mu
x = seq(from=0,to=1, by=0.01)
betapdf = dbeta(x,alpha,beta)
plot(x, betapdf,
type='l',
main='Beta-distribution PDF'
ylab= 'Beta-PDF')
rm(list = ls())
mu = 0.2
sigma2=0.01
alpha=mu*((mu*(1-mu)/sigma2)-1)
beta=alpha*(1-mu)/mu
x = seq(from=0,to=1, by=0.01)
betapdf = dbeta(x,alpha,beta)
plot(x, betapdf,
type='l',
main='Beta-distribution PDF',
ylab= 'Beta-PDF')
CI95=quantile(sample,probs=c(0.025,0.975))
rm(list = ls())
mu = 0.2
sigma2=0.01
alpha=mu*((mu*(1-mu)/sigma2)-1)
beta=alpha*(1-mu)/mu
x = seq(from=0,to=1, by=0.01)
betapdf = dbeta(x,alpha,beta)
plot(x, betapdf,
type='l',
main='Beta-distribution PDF',
ylab= 'Beta-PDF')
n = 1000
sample = rbeta(n,alpha,beta)
hist(sample)
mean = mean(sample)
variance = var(sample)
paste0("Sample mean: ", mean)
paste0("Sample variance: ",variance)
CI95=quantile(sample,probs=c(0.025,0.975))
plot(x,betapdf,
type='l',
main='Beta-distribution PDF',
color='red')
abline(v = CI95[[1]], lty = 2)
abline(v = CI95[[2]], lty = 2)
CI95=quantile(sample,probs=c(0.025,0.975))
plot(x,betapdf,
type='l',
main='Beta-distribution PDF',
col='red')
abline(v = CI95[[1]], lty = 2)
abline(v = CI95[[2]], lty = 2)
CI95=quantile(sample,probs=c(0.025,0.975))
plot(x,betapdf,
type='l',
main='Beta-distribution PDF')
abline(v = CI95[[1]],
lty = 2,
col='red')
abline(v = CI95[[2]],
lty = 2,
col='red')
CI95=quantile(sample,probs=c(0.025,0.975))
plot(x,betapdf,
type='l',
main='Beta-distribution PDF',
ylab= 'Beta-PDF')
abline(v = CI95[[1]],
lty = 2,
col='red')
abline(v = CI95[[2]],
lty = 2,
col='red')
rm(list = ls())
mu = 0.2
sigma2=0.01
alpha=mu*((mu*(1-mu)/sigma2)-1)
beta=alpha*(1-mu)/mu
x = seq(from=0,to=1, by=0.01)
betapdf = dbeta(x,alpha,beta)
plot(x, betapdf,
type='l',
main='Beta-distribution PDF',
ylab= 'Density')
n = 1000
sample = rbeta(n,alpha,beta)
hist(sample)
mean = mean(sample)
variance = var(sample)
paste0("Sample mean: ", mean)
paste0("Sample variance: ",variance)
CI95=quantile(sample,probs=c(0.025,0.975))
plot(x,betapdf,
type='l',
main='Beta-distribution PDF',
ylab= 'Density')
abline(v = CI95[[1]],
lty = 2,
col='red')
abline(v = CI95[[2]],
lty = 2,
col='red')
rm(list = ls())
P_test_pos_con_cancer_pos = 0.98
P_test_neg_con_cancer_neg = 0.96
P_cancer_pos = 1/1000
P_cancer_neg = 1 - P_cancer_pos
P_test_neg_con_cancer_pos = 1 - P_test_pos_con_cancer_pos
P_test_pos_con_cancer_neg = 1 - P_test_neg_con_cancer_neg
P_test_pos_and_cancer_pos = P_test_pos_con_cancer_pos * P_cancer_pos
P_test_neg = P_test_neg_con_cancer_neg * P_cancer_neg + P_test_neg_con_cancer_pos * P_cancer_pos
P_test_pos = 1-P_test_neg
P_cancer_pos_con_test_neg = (P_test_neg_con_cancer_pos * P_cancer_pos) /  P_test_neg
P_cancer_pos_con_test_pos = P_test_pos_con_cancer_pos * P_cancer_pos/ P_test_pos
cat(paste0("P(cancer=positive|test=neg)=",round(P_cancer_pos_con_test_neg*100,4),"%\n"),sep="")
cat(paste0("P(cancer=positive|test=positive) = ",round(P_cancer_pos_con_test_pos*100,4),"%"),sep="")
rm(list = ls())
p_red = function(boxes){
P_A = 0.4
P_B = 0.1
P_C = 1 - P_A - P_B
P_red_con_A = boxes[1,1]/rowSums(boxes)[1]
P_red_con_B = boxes[2,1]/rowSums(boxes)[2]
P_red_con_C = boxes[3,1]/rowSums(boxes)[3]
res = P_red_con_A*P_A + P_B*P_red_con_B + P_red_con_C * P_C
return(res)
}
boxes <- matrix(c(2,4,1,5,1,3), ncol = 2,dimnames = list(c("A", "B", "C"), c("red", "white")))
p_red(boxes = boxes)
p_box = function(boxes){
P_A = 0.4
P_B = 0.1
P_C = 1 - P_A - P_B
P_red_res = p_red(boxes = boxes)
P_red_con_A = boxes[1,1]/rowSums(boxes)[1]
P_red_con_B = boxes[2,1]/rowSums(boxes)[2]
P_red_con_C = boxes[3,1]/rowSums(boxes)[3]
P_A_con_red = P_red_con_A * P_A / P_red_res
P_B_con_red = P_red_con_B * P_B / P_red_res
P_C_con_red = P_red_con_C * P_C / P_red_res
res = c(P_A_con_red,P_B_con_red,P_C_con_red)
return(res)
}
p_box(boxes = boxes)
p_identical_twin = function(fraternal_prob, identical_prob){
P_boy = 1/2
P_ident_and_twin_boy = P_boy*identical_prob
P_frat_and_twin_boy = P_boy*P_boy*fraternal_prob
P_ident_con_twin_boy = P_ident_and_twin_boy/(P_ident_and_twin_boy+P_frat_and_twin_boy)
return(P_ident_con_twin_boy)
}
P_res = p_identical_twin(fraternal_prob = 1/150, identical_prob = 1/400)
paste0("Probability of identical twin: ", round(P_res,4)*100,"%")
remove.packages("xfun", lib="~/R/win-library/3.6")
utils::install.packages("xfun", repos = "https://cran.rstudio.com/")
install.packages("xfun")
library(aaltobda)
install.packages("aaltobda")
install.packages("aaltobda")
library(aaltobda)
rm(list = ls())
library(aaltobda)
rm(list = ls())
algae_test = c(0, 1, 1, 0, 0, 0)
library(aaltobda)
suppressWarnings(install.packages("aaltobda"))
install.packages(aaltobda
)
install.packages(aaltobda)
remotes::install_github("avehtari/BDA_course_Aalto",
subdir = "rpackage", upgrade="never")
rm(list = ls())
algae_test = c(0, 1, 1, 0, 0, 0)
library(aaltobda)
data("algae")
force(algae)
plot(algae)
```{r}
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 2")
library(markmyassignment)
assignment_path <- paste("https://github.com/avehtari/BDA_course_Aalto/",
"blob/master/assignments/tests/assignment2.yml", sep="")
set_assignment(assignment_path)
?count
?counta
?size
?length
n = length(algea)
rm(list = ls())
algae_test = c(0, 1, 1, 0, 0, 0)
library(aaltobda)
data("algae")
n = length(algea)
force(algae)
n = length(algea)
library(aaltobda)
rm(list = ls())
algae_test = c(0, 1, 1, 0, 0, 0)
data("algae")
n = length(algea)
n = length(algae)
y = sum(algae)
n = length(algae)
y = sum(algae)
alpha = 2+y
beta = 10+n-y
beta_point_est = function( prior_alpha, prior_beta, data){
num = alpha + y
denum = alpha + beta + n
return(num/denum)
}
beta_point_est(prior_alpha = 2, prior_beta = 10, data = algae_test)
beta_point_est = function( prior_alpha, prior_beta, data){
n = length(data)
y = sum(data)
num = prior_alpha + y
denum = prior_alpha + prior_beta + n
return(num/denum)
}
beta_point_est(prior_alpha = 2, prior_beta = 10, data = algae_test)
beta_point_est = function( prior_alpha, prior_beta, data){
n = length(data)
y = sum(data)
num = prior_alpha + y
denum = prior_alpha + prior_beta + n
return(num/denum)
}
beta_point_est(prior_alpha = 46, prior_beta = 240, data = algae)
library(markmyassignment)
assignment_path <- paste("https://github.com/avehtari/BDA_course_Aalto/",
"blob/master/assignments/tests/assignment2.yml", sep="")
set_assignment(assignment_path)
mark_my_assignment()
?qbeta
qbeta(algae,2, 10)
qbeta(c(0.05,0.95),2, 10)
beta_interval = function(prior_alpha, prior_beta, data, prob){
lower = (1-prob)/2
upper = prob+lower
res = qbeta(c(lower,upper),prior_alpha, prior_beta)
}
beta_interval(prior_alpha = 2, prior_beta = 10, data = algae_test, prob = 0.9)
beta_interval = function(prior_alpha, prior_beta, data, prob){
lower = (1-prob)/2
upper = prob+lower
res = qbeta(c(lower,upper),prior_alpha, prior_beta)
return(res)
}
beta_interval(prior_alpha = 2, prior_beta = 10, data = algae_test, prob = 0.9)
beta_interval = function(prior_alpha, prior_beta, data, prob){
lower = (1-prob)/2
upper = prob+lower
res = qbeta(c(lower,upper), prior_alpha, prior_beta)
return(res)
}
beta_interval(prior_alpha = 2, prior_beta = 10, data = algae_test, prob = 0.9)
library(markmyassignment)
assignment_path <- paste("https://github.com/avehtari/BDA_course_Aalto/",
"blob/master/assignments/tests/assignment2.yml", sep="")
set_assignment(assignment_path)
mark_my_assignment()
beta_interval = function(prior_alpha, prior_beta, data, prob){
lower = (1-prob)/2
upper = prob+lower
interval = c(lower,upper)
n = length(algae)
y = sum(algae)
post_alpha = prior_alpha + y
post_beta = prior_beta + n - y
res = qbeta(interval, prior_alpha, prior_beta)
return(res)
}
beta_interval(prior_alpha = 2, prior_beta = 10, data = algae_test, prob = 0.9)
beta_interval = function(prior_alpha, prior_beta, data, prob){
lower = (1-prob)/2
upper = prob+lower
interval = c(lower,upper)
n = length(algae)
y = sum(algae)
post_alpha = prior_alpha + y
post_beta = prior_beta + n - y
res = qbeta(interval, post_alpha, post_beta)
return(res)
}
beta_interval(prior_alpha = 2, prior_beta = 10, data = algae_test, prob = 0.9)
beta_interval = function(prior_alpha, prior_beta, data, prob){
lower = (1-prob)/2
upper = prob+lower
interval = c(lower,upper)
n = length(data)
y = sum(data)
post_alpha = prior_alpha + y
post_beta = prior_beta + n - y
res = qbeta(interval, post_alpha, post_beta)
return(res)
}
beta_interval(prior_alpha = 2, prior_beta = 10, data = algae_test, prob = 0.9)
library(markmyassignment)
assignment_path <- paste("https://github.com/avehtari/BDA_course_Aalto/",
"blob/master/assignments/tests/assignment2.yml", sep="")
set_assignment(assignment_path)
mark_my_assignment()
beta_interval = function(prior_alpha, prior_beta, data, prob){
lower = (1-prob)/2
upper = prob+lower
interval = c(lower,upper)
n = length(data)
y = sum(data)
post_alpha = prior_alpha + y
post_beta = prior_beta + n - y
res = qbeta(interval, post_alpha, post_beta)
return(res)
}
beta_interval(prior_alpha = 2, prior_beta = 10, data = algea, prob = 0.9)
beta_interval = function(prior_alpha, prior_beta, data, prob){
lower = (1-prob)/2
upper = prob+lower
interval = c(lower,upper)
n = length(data)
y = sum(data)
post_alpha = prior_alpha + y
post_beta = prior_beta + n - y
res = qbeta(interval, post_alpha, post_beta)
return(res)
}
beta_interval(prior_alpha = 2, prior_beta = 10, data = algae, prob = 0.9)
dbeta(c(0,0.02), 2, 10)
beta_low = function(prior_alpha, prior_beta, data, pi_0){
n = length(data)
y = sum(data)
post_alpha = prior_alpha + y
post_beta = prior_beta + n - y
quantiles = c(0,pi_0)
res = pbeta(quantiles, post_alpha, post_beta)
return(res)
}
beta_low(prior_alpha = 2, prior_beta = 10, data = algae_test, pi_0 = 0.2)
beta_low = function(prior_alpha, prior_beta, data, pi_0){
n = length(data)
y = sum(data)
post_alpha = prior_alpha + y
post_beta = prior_beta + n - y
quantiles = c(0,pi_0)
res = pbeta(quantiles, post_alpha, post_beta)
return(res[2])
}
beta_low(prior_alpha = 2, prior_beta = 10, data = algae_test, pi_0 = 0.2)
beta_low = function(prior_alpha, prior_beta, data, pi_0){
n = length(data)
y = sum(data)
post_alpha = prior_alpha + y
post_beta = prior_beta + n - y
quantiles = c(0,pi_0)
res = pbeta(quantiles, post_alpha, post_beta)
return(res[2])
}
beta_low(prior_alpha = 2, prior_beta = 10, data = data, pi_0 = 0.2)
beta_low = function(prior_alpha, prior_beta, data, pi_0){
n = length(data)
y = sum(data)
post_alpha = prior_alpha + y
post_beta = prior_beta + n - y
res = pbeta(pi_0, post_alpha, post_beta)
return(res)
}
beta_low(prior_alpha = 2, prior_beta = 10, data = algae, pi_0 = 0.2)
library(markmyassignment)
assignment_path <- paste("https://github.com/avehtari/BDA_course_Aalto/",
"blob/master/assignments/tests/assignment2.yml", sep="")
set_assignment(assignment_path)
mark_my_assignment()
