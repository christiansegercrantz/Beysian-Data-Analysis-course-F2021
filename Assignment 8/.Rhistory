rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 6")
library(aaltobda)
library("rstan")
data("drowning")
drowning
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7stan.stan")
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7stan.stan")
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7.stan")
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7.stan")
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7.stan")
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7.stan")
sigma = 69/5.15
length(drowning)
length(drowning[1])
length(drowning[1,])
length(drowning[,1])
N = length(drowning[,1])
sigma = (N*138)/5.15
sigma = (sqrt(N)'*138)/5.15
sigma = (sqrt(N)*138)/5.15
sigma = (sqrt(N)*138)/5.15
sigma = (sqrt(N)*138)/5.15
?rnorm
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = (N^2*(0-(-69)))/(5.15/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = (N^2*(69-(-69)))/(5.15/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
mean(drowning[1,])
drowning[1,]
drowning[,1]
mean(drowning[,2])
mu = mean(drowning[,2])
c = 0.99
sigma = sqrt(N)(5.15-mu)/(1-c)/2
sigma = sqrt(N)*(5.15-mu)/(1-c)/2
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = sqrt(N)*(139-mu)/(1-c)/2
sigma = sqrt(N)*(69-mu)/(1-c)/2
sigma = sqrt(N)*(69-mu)/(1-c)/2
sigma = sqrt(N)*(139-mu)/(1-c)/2
sigma = sqrt(N)*(139-mu)/((1-c)/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = sqrt(N)*(139-69)/((1-c)/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = 69*sqrt(N)/((1-c)/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
mu_hist = 138
c = 0.99
sigma = 69*sqrt(N)/((1-c)/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
0+2.576*12/sqrt(40)
0+2.576*120/sqrt(40)
qnorm(c(0.01,0.99), mean= 0, sd = 1)
sigma = mu_hist/(5.15/2)
qnorm(c(0.01,0.99), mean= 0, sd = 1)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
qnorm(c(0.01,0.99), mean= 0, sd = sqrt(sigma))
sigma = mu_hist/(5.15/2)
sigma = mu_hist/2 -0/(5.15/2)
sigma = (mu_hist/2-0)/(5.15/2)
sigma = (mu_hist/2-mu)/(5.15/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = (mu_hist/2-0)/(5.15/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = (mu_hist/2-mu)/(5.15/2)
sigma = (mu_hist/2-0)/(5.15/2)
mu = 0
c = 0.99
sigma = (mu_hist/2-mu)/(5.15/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = (mu_hist/2-mu)/(2.58/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = (mu_hist/2-mu)/(2.58)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
qnorm(0.995)
(1-0.99)/2
sigma = (mu_hist/2-mu)/(z)
z = qnorm(0.995)
sigma = (mu_hist/2-mu)/(z)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
prob <- qnorm(0.995)
sigma_beta <- 69/prob
qnorm(c(0.01,0.995), mean= 0, sd = sigma)
qnorm(c(0.005,0.995), mean= 0, sd = sigma)
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7.stan")
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7.stan")
head(drowning)
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 6")
library(aaltobda)
library("rstan")
data("drowning")
rm(list = ls())
#setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7")
library(aaltobda)
library("rstan")
data("drowning")
rm(list = ls())
library(aaltobda)
library("rstan")
data("drowning")
N = length(drowning[,1])
mu_hist = 138
mu = 0
c = 0.99
z = qnorm(0.995)
sigma_beta = (mu_hist/2-mu)/(z)
qnorm(c(0.005,0.995), mean= 0, sd = sigma)
qnorm(c(0.005,0.995), mean= 0, sd = sigma_beta)
N = length(drowning[,1])
mu_hist = 138
mu = 0
c = 0.99
z = qnorm(0.995)
sigma_beta = (mu_hist/2-mu)/(z)
qnorm(c(0.005,0.995), mean= 0, sd = sigma_beta)
rm(list = ls())
library(aaltobda)
library("rstan")
data("drowning")
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7.stan")
rm(list = ls())
library(aaltobda)
library("rstan")
data("drowning")
rm(list = ls())
data("factory")
mean_mu_prior = 100
mean_sigma_prior = 10
sigma_prior = 10
separate_data <- list(
y = factory,
N = nrow(factory),
J = ncol(factory),
mean_mu_prior = mean_mu_prior,
mean_sigma_prior = mean_sigma_prior,
sigma_prior = sigma_prior
)
fit_separate = sampling(separatemodel,
data = separate_data,            # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
refresh = 0             # no progress shown
)
extract_separate <- data.frame(extract(fit_separate))
ggplot(extract_separate, aes(x=ypred)) +
geom_histogram(aes(y=..density..), binwidth = 0.1, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(ypred)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_separate, aes(x=mu[6])) +
geom_histogram(aes(y=..density..), binwidth = 200, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(mu.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
extract_separate <- data.frame(extract(fit_separate))
ggplot(extract_separate, aes(x=ypred)) +
geom_histogram(aes(y=..density..), binwidth = 0.1, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(ypred)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_separate, aes(x=mu.6)) +
geom_histogram(aes(y=..density..), binwidth = 200, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(mu.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_separate, aes(x=sigma.6)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(sigma.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
extract_separate <- data.frame(extract(fit_separate))
ggplot(extract_separate, aes(x=ypred)) +
geom_histogram(aes(y=..density..), binwidth = 1, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(ypred)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_separate, aes(x=mu.6)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(mu.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_separate, aes(x=sigma.6)) +
geom_histogram(aes(y=..density..), binwidth = 51, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(sigma.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
extract_separate <- data.frame(extract(fit_separate))
ggplot(extract_separate, aes(x=ypred)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(ypred)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_separate, aes(x=mu.6)) +
geom_histogram(aes(y=..density..), binwidth = 2, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(mu.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_separate, aes(x=sigma.6)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(sigma.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
extract_separate <- data.frame(extract(fit_separate))
ggplot(extract_separate, aes(x=ypred)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(ypred)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_separate, aes(x=mu.6)) +
geom_histogram(aes(y=..density..), binwidth = 2, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(mu.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_separate, aes(x=sigma.6)) +
geom_histogram(aes(y=..density..), binwidth = 1, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(sigma.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
rm(list = ls())
library("rstan")
data <- read.csv(file = 'covid_vaccination_vs_death_ratio.csv')
View(data)
library("dplyr")
install.packages("dplyr")
rm(list = ls())
library("rstan")
library("dplyr")
data <- read.csv(file = 'covid_vaccination_vs_death_ratio.csv')
View(data)
View(data)
View(data)
View(data)
data %>%
group_by(country) %>%
slice(which.max(as.Date(date, '%Y-%m-%d')))
View(data)
ggplot(data, aes(y=people_fully_vaccinated)) ++ geom_histogram()
ggplot(data, aes(x=people_fully_vaccinated)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(people_fully_vaccinated)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(data, aes(x=people_fully_vaccinated)) +
geom_histogram(aes(y=..density..), binwidth = 100000, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(people_fully_vaccinated)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(data, aes(x=people_fully_vaccinated)) +
geom_histogram(aes(y=..density..), binwidth = 100000, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(people_fully_vaccinated)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666") +
scale_x_continuous(trans='log2')
ggplot(data, aes(x=people_fully_vaccinated)) +
geom_histogram(aes(y=..density..), binwidth = 1000000, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(people_fully_vaccinated)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(data, aes(x=people_fully_vaccinated)) +
geom_histogram(aes(y=..density..), binwidth = 2000000, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(people_fully_vaccinated)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(data, aes(x=people_fully_vaccinated)) #+
ggplot(data, aes(x=people_fully_vaccinated)) +geom_point()#+
ggplot(data, aes(y=people_fully_vaccinated)) +geom_point()#+
ggplot(data, aes(y=people_fully_vaccinated)) +
geom_histogram(aes(y=..density..), binwidth = 2000000, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(people_fully_vaccinated)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(data, aes(x=people_fully_vaccinated)) +
geom_histogram(aes(y=..density..), binwidth = 2000000, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(people_fully_vaccinated)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(data, aes(x=people_fully_vaccinated/population)) +
geom_histogram(aes(y=..density..), binwidth = 2000000, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(people_fully_vaccinated)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(data, aes(x=people_fully_vaccinated/population)) +
geom_histogram(aes(y=..density..), binwidth = 0.1, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(people_fully_vaccinated)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
data %>%
group_by(country) %>%
slice(which.max(as.Date(date, '%Y-%m-%d'))) %>%
mutate(people_fully_vaccinated_procentage = people_fully_vaccinated/population*100)
data %>%
group_by(country) %>%
slice(which.max(as.Date(date, '%Y-%m-%d'))) %>%
mutate(people_fully_vaccinated_procentage = total_vaccinations/population*100)
data %>%
group_by(country) %>%
slice(which.max(as.Date(date, '%Y-%m-%d'))) %>%
mutate(people_fully_vaccinated_procentage = people_vaccinated/population*100)
data %>%
group_by(country) %>%
slice(which.max(as.Date(date, '%Y-%m-%d'))) %>%
mutate(people_fully_vaccinated_procentage = people_fully_vaccinated
/population*100)
ggplot(data, aes(x=people_fully_vaccinated_procentage)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(people_fully_vaccinated)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
View(data)
data <- data %>%
group_by(country) %>%
slice(which.max(as.Date(date, '%Y-%m-%d'))) %>%
mutate(people_fully_vaccinated_procentage = people_fully_vaccinated
/population*100)
```{r}
data <- data %>%
group_by(country) %>%
slice(which.max(as.Date(date, '%Y-%m-%d'))) %>%
mutate(people_fully_vaccinated_procentage = people_fully_vaccinated
/population*100)
View(data)
ggplot(data, aes(x=ratio)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(people_fully_vaccinated)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
View(data)
data$ratio
max(data$ratio)
min(data$ratio)
ggplot(data, aes(x=ratio)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(ratio)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(data, aes(x=people_fully_vaccinated)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(people_fully_vaccinated)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(data, aes(x=ratio)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(ratio)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(data, aes(x=people_fully_vaccinated)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(people_fully_vaccinated)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
max(data$people_fully_vaccinated)
min(data$people_fully_vaccinated)
View(data)
ggplot(data, aes(x=people_fully_vaccinated_procentage)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(people_fully_vaccinated_procentage)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
data <- data %>%
group_by(country) %>%
slice(which.max(as.Date(date, '%Y-%m-%d'))) %>%
mutate(people_fully_vaccinated_procentage = people_fully_vaccinated
/population*100)
data
rm(list = ls())
library("rstan")
library("dplyr")
data <- read.csv(file = 'covid_vaccination_vs_death_ratio.csv')
data_newest_date <- data %>%
group_by(country) %>%
slice(which.max(as.Date(date, '%Y-%m-%d'))) %>%
mutate(people_fully_vaccinated_procentage = people_fully_vaccinated
/population*100)
data
ggplot(data_newest_date, aes(x=people_fully_vaccinated_procentage)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(people_fully_vaccinated_procentage)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(data, aes(x=people_fully_vaccinated_procentage)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(people_fully_vaccinated_procentage)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
rm(list = ls())
library("rstan")
library("dplyr")
data <- read.csv(file = 'covid_vaccination_vs_death_ratio.csv')
data_newest_date <- data %>%
group_by(country) %>%
slice(which.max(as.Date(date, '%Y-%m-%d'))) %>%
mutate(people_fully_vaccinated_procentage = people_fully_vaccinated
/population*100)
data_newest_date
ggplot(data_newest_date, aes(x=people_fully_vaccinated_procentage)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(people_fully_vaccinated_procentage)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(data, aes(x=people_fully_vaccinated_procentage)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(people_fully_vaccinated_procentage)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(data, aes(x=date, y=New_deaths)) + geom_point()
ggplot(data[country="Finland"], aes(x=date, y=New_deaths)) + geom_point()
data[country="Finland"]
data[data$country="Finland"]
data[data$country=="Finland"]
data[data[, "country"] == "Finalnd",]
data[data[, "country"] == "Finland",]
ggplot(data[data[, "country"] == "Finland",], aes(x=date, y=New_deaths)) + geom_point()
ggplot(data[data[, "country"] == "Finland",], aes(x=New_deaths)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(New_deaths)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(data[data[, "country"] == "Finland",], aes(x=New_deaths)) +
geom_histogram(aes(y=..density..), binwidth = 1, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(New_deaths)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(data[data[, "country"] == "Finland",], aes(x=New_deaths)) +
geom_histogram(aes(y=..density..), binwidth = 0.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(New_deaths)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(data[data[, "country"] == "Finland",], aes(x=New_deaths)) +
geom_histogram(aes(y=..density..), binwidth = 1, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(New_deaths)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(data[data[, "country"] == "Sweden",], aes(x=New_deaths)) +
geom_histogram(aes(y=..density..), binwidth = 1, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(New_deaths)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
Finland
ggplot(data[data[, "country"] == "Finland",], aes(x=New_deaths)) +
geom_histogram(aes(y=..density..), binwidth = 1, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(New_deaths)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(data[data[, "country"] == "Sweden",], aes(x=New_deaths)) +
geom_histogram(aes(y=..density..), binwidth = 1, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(New_deaths)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
Finland
ggplot(data[data[, "country"] == "Finland",], aes(x=New_deaths)) +
geom_histogram(aes(y=..density..), binwidth = 1, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(New_deaths)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
install.packages("loo")
install.packages("loo")
install.packages("loo")
install.packages("loo")
install.packages("loo")
install.packages("loo")
rm(list = ls())
library(aaltobda)
library("rstan")
library(loo)
data("factory")
mean_mu_prior = 100
mean_sigma_prior = 10
sigma_prior = 10
separate_data <- list(
y = factory,
N = nrow(factory),
J = ncol(factory),
mean_mu_prior = mean_mu_prior,
mean_sigma_prior = mean_sigma_prior,
sigma_prior = sigma_prior
)
fit_separate = sampling(separatemodel,
data = separate_data,            # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
refresh = 0             # no progress shown
)
print(fit_separate)
log_like_separate = extract_log_lik(fit_separate, merge_chains = FALSE)
r_eff <- relative_eff(exp(log_like_separate), cores = 4)
loo_separate <- loo(log_like_separate, r_eff = r_eff, cores = 4)
p_loo_separate <- loo_separate$p_loo
print(loo_separate)
plot(loo_separate)
mean_mu_prior = 100
mean_sigma_prior = 10
sigma_prior = 10
pooled_data <- list(
y = unlist(factory),
N = nrow(factory),
J = ncol(factory),
mean_mu_prior = mean_mu_prior,
mean_sigma_prior = mean_sigma_prior,
sigma_prior = sigma_prior
)
fit_pooled = sampling(pooledmodel,
data = pooled_data,            # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
refresh = 0             # no progress shown
)
log_like_pooled = extract_log_lik(fit_pooled, merge_chains = FALSE)
r_eff <- relative_eff(exp(log_like_pooled), cores = 4)
loo_pooled <- loo(log_like_pooled, r_eff = r_eff, cores = 4)
p_loo_pooled <- loo_pooled$p_loo
print(loo_pooled)
plot(loo_pooled)
mean_mu_prior = 100
mean_sigma_prior = 10
sigma_prior = 10
hierarchical_data <- list(
y = factory,
N = nrow(factory),
J = ncol(factory),
mean_mu_prior = mean_mu_prior,
mean_sigma_prior = mean_sigma_prior,
sigma_prior = sigma_prior
)
fit_hierarchical = sampling(hierarchicalmodel,
data = hierarchical_data,            # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
refresh = 0             # no progress shown
)
log_like_hierarchical = extract_log_lik(fit_hierarchical, merge_chains = FALSE)
r_eff <- relative_eff(exp(log_like_hierarchical), cores = 4)
loo_hierarchical <- loo(log_like_hierarchical, r_eff = r_eff, cores = 4)
print(loo_hierarchical)
plot(loo_hierarchical)
p_loo_hierarchical <- loo_hierarchical$p_loo
loo_compare(loo_separate,loo_pooled,loo_hierarchical)
?loo_compare
loo_compare(loo_separate,loo_pooled,loo_hierarchical,simplify=FALSE)
loo_compare(loo_separate,loo_pooled,loo_hierarchical,simplify=FALSE)
loo_compare(loo_separate,loo_pooled,loo_hierarchical)
print(loo_compare(loo_separate,loo_pooled,loo_hierarchical))
print(loo_compare(loo_separate,loo_pooled,loo_hierarchical), simplyfi=FALSE)
loo_compare(loo_separate,loo_pooled,loo_hierarchical)
