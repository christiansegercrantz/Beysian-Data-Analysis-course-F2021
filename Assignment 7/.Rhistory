alpha2 = mu[1]+sqrt(sigma[1,1])
alpha3 = mu[1]-sqrt(sigma[1,1])
beta1 = mu[2]
beta2 = mu[2] + sqrt(sigma[2,2])
beta3 = mu[2] - sqrt(sigma[2,2])
thetas1 = Metropolis_bioassay(n, alpha1, beta1, warmup_procent)
thetas2 = Metropolis_bioassay(n, alpha2, beta2, warmup_procent)
thetas3 = Metropolis_bioassay(n, alpha3, beta3, warmup_procent)
plot(thetas1[,1],
type='l',
col='red',
ylab='alpha')
lines(thetas2[,1],
type='l',
col='blue')
lines(thetas3[,1],
type='l',
col='black')
plot(thetas1[,2],
type='l',
col='red',
ylab='beta')
lines(thetas2[,2],
type='l',
col='blue')
lines(thetas3[,2],
type='l',
col='black')
alphas = cbind(thetas1[,1],thetas2[,1],thetas3[,1])
alpha_Rhat = Rhat(alphas)
betas = cbind(thetas1[,2],thetas2[,2],thetas3[,2])
betas_Rhat = Rhat(betas)
plot(thetas1[,1], thetas1[,2],
col='red',
xlab='alpha',
ylab="beta",
main="Draws of the parameters")
points(thetas2[,1], thetas2[,2], col='red')
points(thetas3[,1], thetas3[,2], col='red')
?bioassaylp
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 6")
library(aaltobda)
library("rstan")
data("bioassay")
?bioassaylp
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 6")
library(aaltobda)
library("rstan")
data("drowning")
drowning
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7stan.stan")
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7stan.stan")
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7.stan")
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7.stan")
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7.stan")
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7.stan")
sigma = 69/5.15
length(drowning)
length(drowning[1])
length(drowning[1,])
length(drowning[,1])
N = length(drowning[,1])
sigma = (N*138)/5.15
sigma = (sqrt(N)'*138)/5.15
sigma = (sqrt(N)*138)/5.15
sigma = (sqrt(N)*138)/5.15
sigma = (sqrt(N)*138)/5.15
?rnorm
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = (N^2*(0-(-69)))/(5.15/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = (N^2*(69-(-69)))/(5.15/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
mean(drowning[1,])
drowning[1,]
drowning[,1]
mean(drowning[,2])
mu = mean(drowning[,2])
c = 0.99
sigma = sqrt(N)(5.15-mu)/(1-c)/2
sigma = sqrt(N)*(5.15-mu)/(1-c)/2
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = sqrt(N)*(139-mu)/(1-c)/2
sigma = sqrt(N)*(69-mu)/(1-c)/2
sigma = sqrt(N)*(69-mu)/(1-c)/2
sigma = sqrt(N)*(139-mu)/(1-c)/2
sigma = sqrt(N)*(139-mu)/((1-c)/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = sqrt(N)*(139-69)/((1-c)/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = 69*sqrt(N)/((1-c)/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
mu_hist = 138
c = 0.99
sigma = 69*sqrt(N)/((1-c)/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
0+2.576*12/sqrt(40)
0+2.576*120/sqrt(40)
qnorm(c(0.01,0.99), mean= 0, sd = 1)
sigma = mu_hist/(5.15/2)
qnorm(c(0.01,0.99), mean= 0, sd = 1)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
qnorm(c(0.01,0.99), mean= 0, sd = sqrt(sigma))
sigma = mu_hist/(5.15/2)
sigma = mu_hist/2 -0/(5.15/2)
sigma = (mu_hist/2-0)/(5.15/2)
sigma = (mu_hist/2-mu)/(5.15/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = (mu_hist/2-0)/(5.15/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = (mu_hist/2-mu)/(5.15/2)
sigma = (mu_hist/2-0)/(5.15/2)
mu = 0
c = 0.99
sigma = (mu_hist/2-mu)/(5.15/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = (mu_hist/2-mu)/(2.58/2)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
sigma = (mu_hist/2-mu)/(2.58)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
qnorm(0.995)
(1-0.99)/2
sigma = (mu_hist/2-mu)/(z)
z = qnorm(0.995)
sigma = (mu_hist/2-mu)/(z)
qnorm(c(0.01,0.99), mean= 0, sd = sigma)
prob <- qnorm(0.995)
sigma_beta <- 69/prob
qnorm(c(0.01,0.995), mean= 0, sd = sigma)
qnorm(c(0.005,0.995), mean= 0, sd = sigma)
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7.stan")
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7.stan")
head(drowning)
rm(list = ls())
setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 6")
library(aaltobda)
library("rstan")
data("drowning")
rm(list = ls())
#setwd("~/GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7")
library(aaltobda)
library("rstan")
data("drowning")
rm(list = ls())
library(aaltobda)
library("rstan")
data("drowning")
N = length(drowning[,1])
mu_hist = 138
mu = 0
c = 0.99
z = qnorm(0.995)
sigma_beta = (mu_hist/2-mu)/(z)
qnorm(c(0.005,0.995), mean= 0, sd = sigma)
qnorm(c(0.005,0.995), mean= 0, sd = sigma_beta)
N = length(drowning[,1])
mu_hist = 138
mu = 0
c = 0.99
z = qnorm(0.995)
sigma_beta = (mu_hist/2-mu)/(z)
qnorm(c(0.005,0.995), mean= 0, sd = sigma_beta)
rm(list = ls())
library(aaltobda)
library("rstan")
data("drowning")
rstan:::rstudio_stanc("GitHub/Beysian-Data-Analysis-course-F2021/Assignment 7/Assignment 7.stan")
rm(list = ls())
library(aaltobda)
library("rstan")
data("drowning")
rm(list = ls())
data("factory")
mean_mu_prior = 100
mean_sigma_prior = 10
sigma_prior = 10
separate_data <- list(
y = factory,
N = nrow(factory),
J = ncol(factory),
mean_mu_prior = mean_mu_prior,
mean_sigma_prior = mean_sigma_prior,
sigma_prior = sigma_prior
)
fit_separate = sampling(separatemodel,
data = separate_data,            # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
refresh = 0             # no progress shown
)
extract_separate <- data.frame(extract(fit_separate))
ggplot(extract_separate, aes(x=ypred)) +
geom_histogram(aes(y=..density..), binwidth = 0.1, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(ypred)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_separate, aes(x=mu[6])) +
geom_histogram(aes(y=..density..), binwidth = 200, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(mu.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
extract_separate <- data.frame(extract(fit_separate))
ggplot(extract_separate, aes(x=ypred)) +
geom_histogram(aes(y=..density..), binwidth = 0.1, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(ypred)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_separate, aes(x=mu.6)) +
geom_histogram(aes(y=..density..), binwidth = 200, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(mu.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_separate, aes(x=sigma.6)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(sigma.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
extract_separate <- data.frame(extract(fit_separate))
ggplot(extract_separate, aes(x=ypred)) +
geom_histogram(aes(y=..density..), binwidth = 1, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(ypred)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_separate, aes(x=mu.6)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(mu.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_separate, aes(x=sigma.6)) +
geom_histogram(aes(y=..density..), binwidth = 51, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(sigma.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
extract_separate <- data.frame(extract(fit_separate))
ggplot(extract_separate, aes(x=ypred)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(ypred)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_separate, aes(x=mu.6)) +
geom_histogram(aes(y=..density..), binwidth = 2, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(mu.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_separate, aes(x=sigma.6)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(sigma.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
extract_separate <- data.frame(extract(fit_separate))
ggplot(extract_separate, aes(x=ypred)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(ypred)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_separate, aes(x=mu.6)) +
geom_histogram(aes(y=..density..), binwidth = 2, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(mu.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_separate, aes(x=sigma.6)) +
geom_histogram(aes(y=..density..), binwidth = 1, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(sigma.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
rm(list = ls())
library(aaltobda)
library("rstan")
data("drowning")
mu_hist = 138
mu_beta = 0
z = qnorm(0.995)
sigma_beta = (mu_hist/2-mu_beta)/z
test=lm(formula = drowning$drownings ~ drowning$year)
mu_alpha = lm(formula = drowning$drownings ~ drowning$year)$coefficients[[1]]
sigma_alpha = (mu_alpha/2 - 0)/z
#qnorm(c(0.005,0.995), mean= 0, sd = sigma_beta)
mu <- mean(drowning[,2])
sigma <- var(drowning[,2])
data <- list(
N = length(drowning$drownings), #Number of data points
x = drowning$year,              #Year
y = drowning$drownings,         #Amount of drownings
xpred = 2020,                   #Year(s) to predict
#mu = mu,                        #Mean vector
#sigma = sigma,                  #Covariance matrix
simga_beta=sigma_beta,          #Variance of beta
mu_alpha = mu_alpha,
sigma_alpha = sigma_alpha
)
fit1 = sampling(stanmodel,
data = data,            # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
refresh = 0             # no progress shown
)
#print(fit1)
1+1
extract <- data.frame(extract(fit1))
ggplot(extract, aes(x=ypred)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(ypred)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract, aes(x=beta)) +
geom_histogram(aes(y=..density..), binwidth = 0.1, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(beta)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract, aes(x=alpha)) +   geom_histogram(aes(y=..density..), binwidth = 200, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(alpha)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
rm(list = ls())
data("factory")
mean_mu_prior = 100
mean_sigma_prior = 10
sigma_prior = 10
separate_data <- list(
y = factory,
N = nrow(factory),
J = ncol(factory),
mean_mu_prior = mean_mu_prior,
mean_sigma_prior = mean_sigma_prior,
sigma_prior = sigma_prior
)
fit_separate = sampling(separatemodel,
data = separate_data,            # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
refresh = 0             # no progress shown
)
print(fit_separate)
extract_separate <- data.frame(extract(fit_separate))
ggplot(extract_separate, aes(x=ypred)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(ypred)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_separate, aes(x=mu.6)) +
geom_histogram(aes(y=..density..), binwidth = 2, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(mu.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_separate, aes(x=sigma.6)) +
geom_histogram(aes(y=..density..), binwidth = 1, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(sigma.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
separate_data_alternative <- list(
y = factory,
N = nrow(factory),
J = ncol(factory),
mean_mu_prior = 0,
mean_sigma_prior = 10,
sigma_prior = 1
)
fit_separate_alternative = sampling(separatemodel_alternative,
data = separate_data_alternative,            # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
refresh = 0             # no progress shown
)
extract_separate_alternative <- data.frame(extract(fit_separate_alternative))
mu.1_interval = quantile(extract_separate_alternative$mu.1, probs=c(0.05,0.95))
mu.1_interval
mean_mu_prior = 100
mean_sigma_prior = 10
sigma_prior = 10
pooled_data <- list(
y = unlist(factory),
N = nrow(factory),
J = ncol(factory),
mean_mu_prior = mean_mu_prior,
mean_sigma_prior = mean_sigma_prior,
sigma_prior = sigma_prior
)
fit_pooled = sampling(pooledmodel,
data = pooled_data,            # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
refresh = 0             # no progress shown
)
extract_pooled <- data.frame(extract(fit_pooled))
ggplot(extract_pooled, aes(x=ypred)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(ypred)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_pooled, aes(x=mu)) +
geom_histogram(aes(y=..density..), binwidth = 2, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(mu)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_pooled, aes(x=sigma)) +
geom_histogram(aes(y=..density..), binwidth = 1, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(sigma)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
pooled_data_alternative <- list(
y = unlist(factory),
N = nrow(factory),
J = ncol(factory),
mean_mu_prior = 1,
mean_sigma_prior = 10,
sigma_prior = 1
)
fit_pooled_alternative = sampling(pooledmodel_alternative,
data = pooled_data_alternative,            # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
refresh = 0             # no progress shown
)
extract_pooled_alternative <- data.frame(extract(fit_pooled_alternative))
mu.1_interval = quantile(extract_pooled_alternative$mu, probs=c(0.05,0.95))
mu.1_interval
mean_mu_prior = 100
mean_sigma_prior = 10
sigma_prior = 10
hierarchical_data <- list(
y = factory,
N = nrow(factory),
J = ncol(factory),
mean_mu_prior = mean_mu_prior,
mean_sigma_prior = mean_sigma_prior,
sigma_prior = sigma_prior
)
fit_hierarchical = sampling(hierarchicalmodel,
data = hierarchical_data,            # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
refresh = 0             # no progress shown
)
extract_hierarchical <- data.frame(extract(fit_hierarchical))
ggplot(extract_hierarchical, aes(x=ypred)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(ypred)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_hierarchical, aes(x=mu.6)) +
geom_histogram(aes(y=..density..), binwidth = 2, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(mu.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
extract_hierarchical <- data.frame(extract(fit_hierarchical))
ggplot(extract_hierarchical, aes(x=ypred)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(ypred)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_hierarchical, aes(x=mu.6)) +
geom_histogram(aes(y=..density..), binwidth = 2, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(mu.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
View(extract_hierarchical)
extract_hierarchical <- data.frame(extract(fit_hierarchical))
ggplot(extract_hierarchical, aes(x=ypred)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(ypred)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_hierarchical, aes(x=mu_1.6)) +
geom_histogram(aes(y=..density..), binwidth = 2, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(mu.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
View(extract_hierarchical)
extract_hierarchical <- data.frame(extract(fit_hierarchical))
ggplot(extract_hierarchical, aes(x=ypred)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(ypred)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_hierarchical, aes(x=mu_i.6)) +
geom_histogram(aes(y=..density..), binwidth = 2, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(mu.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
extract_hierarchical <- data.frame(extract(fit_hierarchical))
ggplot(extract_hierarchical, aes(x=ypred)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(ypred)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_hierarchical, aes(x=mu_i.6)) +
geom_histogram(aes(y=..density..), binwidth = 2, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(mu_i.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_hierarchical, aes(x=sigma.6)) +
geom_histogram(aes(y=..density..), binwidth = 1, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(sigma.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
View(extract_hierarchical)
extract_hierarchical <- data.frame(extract(fit_hierarchical))
ggplot(extract_hierarchical, aes(x=ypred)) +
geom_histogram(aes(y=..density..), binwidth = 5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(ypred)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_hierarchical, aes(x=mu_i.6)) +
geom_histogram(aes(y=..density..), binwidth = 2, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(mu_i.6)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(extract_hierarchical, aes(x=sigma)) +
geom_histogram(aes(y=..density..), binwidth = 1, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(sigma)), color="blue", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
hierarchical_data_alternative <- list(
y = factory,
N = nrow(factory),
J = ncol(factory),
mean_mu_prior = 1,
mean_sigma_prior = 10,
sigma_prior = 1
)
fit_hierarchical_alternative = sampling(hierarchicalmodel_alternative,
data = hierarchical_data_alternative,            # named list of data
chains = 4,             # number of Markov chains
warmup = 1000,          # number of warmup iterations per chain
iter = 2000,            # total number of iterations per chain
cores = 1,              # number of cores (could use one per chain)
refresh = 0             # no progress shown
)
extract_hierarchical_alternative <- data.frame(extract(fit_hierarchical_alternative))
mu.1_interval = quantile(extract_hierarchical_alternative$mu.1, probs=c(0.05,0.95))
mu.1_interval
mu.1_interval = quantile(extract_hierarchical_alternative$mu_i.1, probs=c(0.05,0.95))
mu.1_interval
